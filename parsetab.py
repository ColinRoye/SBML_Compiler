
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftMINUSPLUSleftMULTDIVrightPOWleftL_BRACKleftL_PARENrightUMINUSAND_ALSO BOOL BOOLEAN COLON COMMA CONS DIV EQ EQ_EQ FLOAT GT GTE HASHTAG IN INTEGER LT LTE L_BRACK L_PAREN MINUS MOD MULT NEQ NOT OR_ELSE PLUS POW R_BRACK R_PAREN SEMICOLON STRINGline : expr SEMICOLONexpr : INTEGER\n            | FLOAT\n            | STRING\n            | BOOLEAN\n            | list\n            | tupleexpr : expr POW expr\n            | expr MULT expr\n            | expr DIV expr\n            | expr MOD expr\n            | expr PLUS expr\n            | expr MINUS exprexpr : MINUS expr %prec UMINUSexpr : expr AND_ALSO expr\n            | expr OR_ELSE expr\n            | expr LTE expr\n            | expr GTE expr\n            | expr EQ_EQ expr\n            | expr NEQ expr\n            | expr LT expr\n            | expr GT exprexpr : expr IN expr\n            | expr CONS exprexpr : NOT exprexpr : expr L_BRACK expr R_BRACKlist : L_BRACK sequence R_BRACK\n            | L_BRACK R_BRACKsequence : expr COMMA sequence\n                   | exprexpr : L_PAREN expr R_PARENtuple : L_PAREN sequence R_PAREN\n             | L_PAREN R_PARENexpr : HASHTAG INTEGER tuple'
    
_lr_action_items = {'INTEGER':([0,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,59,63,],[3,3,3,3,3,40,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'FLOAT':([0,9,10,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,59,63,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'STRING':([0,9,10,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,59,63,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'BOOLEAN':([0,9,10,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,59,63,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,],[9,20,-2,-3,-4,-5,-6,-7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-14,20,-28,20,20,-33,-8,-9,-10,20,-12,-13,20,20,20,20,20,20,20,20,20,20,20,-27,9,-31,-32,-34,9,-26,]),'NOT':([0,9,10,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,59,63,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'L_PAREN':([0,9,10,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,40,59,63,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,63,12,12,]),'HASHTAG':([0,9,10,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,59,63,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'L_BRACK':([0,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,],[11,31,-2,-3,-4,-5,-6,-7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-14,31,-28,31,31,-33,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-27,11,-31,-32,-34,11,-26,]),'$end':([1,14,],[0,-1,]),'SEMICOLON':([2,3,4,5,6,7,8,32,33,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,62,64,],[14,-2,-3,-4,-5,-6,-7,-14,-25,-28,-33,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-27,-31,-32,-34,-26,]),'POW':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[15,-2,-3,-4,-5,-6,-7,-14,15,-28,15,15,-33,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-27,-31,-32,-34,-26,]),'MULT':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[16,-2,-3,-4,-5,-6,-7,-14,16,-28,16,16,-33,-8,-9,-10,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-27,-31,-32,-34,-26,]),'DIV':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[17,-2,-3,-4,-5,-6,-7,-14,17,-28,17,17,-33,-8,-9,-10,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-27,-31,-32,-34,-26,]),'MOD':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[18,-2,-3,-4,-5,-6,-7,-14,18,-28,18,18,-33,-8,-9,-10,18,-12,-13,18,18,18,18,18,18,18,18,18,18,18,-27,-31,-32,-34,-26,]),'PLUS':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[19,-2,-3,-4,-5,-6,-7,-14,19,-28,19,19,-33,-8,-9,-10,19,-12,-13,19,19,19,19,19,19,19,19,19,19,19,-27,-31,-32,-34,-26,]),'AND_ALSO':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[21,-2,-3,-4,-5,-6,-7,-14,21,-28,21,21,-33,-8,-9,-10,21,-12,-13,21,21,21,21,21,21,21,21,21,21,21,-27,-31,-32,-34,-26,]),'OR_ELSE':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[22,-2,-3,-4,-5,-6,-7,-14,22,-28,22,22,-33,-8,-9,-10,22,-12,-13,22,22,22,22,22,22,22,22,22,22,22,-27,-31,-32,-34,-26,]),'LTE':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[23,-2,-3,-4,-5,-6,-7,-14,23,-28,23,23,-33,-8,-9,-10,23,-12,-13,23,23,23,23,23,23,23,23,23,23,23,-27,-31,-32,-34,-26,]),'GTE':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[24,-2,-3,-4,-5,-6,-7,-14,24,-28,24,24,-33,-8,-9,-10,24,-12,-13,24,24,24,24,24,24,24,24,24,24,24,-27,-31,-32,-34,-26,]),'EQ_EQ':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[25,-2,-3,-4,-5,-6,-7,-14,25,-28,25,25,-33,-8,-9,-10,25,-12,-13,25,25,25,25,25,25,25,25,25,25,25,-27,-31,-32,-34,-26,]),'NEQ':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[26,-2,-3,-4,-5,-6,-7,-14,26,-28,26,26,-33,-8,-9,-10,26,-12,-13,26,26,26,26,26,26,26,26,26,26,26,-27,-31,-32,-34,-26,]),'LT':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[27,-2,-3,-4,-5,-6,-7,-14,27,-28,27,27,-33,-8,-9,-10,27,-12,-13,27,27,27,27,27,27,27,27,27,27,27,-27,-31,-32,-34,-26,]),'GT':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[28,-2,-3,-4,-5,-6,-7,-14,28,-28,28,28,-33,-8,-9,-10,28,-12,-13,28,28,28,28,28,28,28,28,28,28,28,-27,-31,-32,-34,-26,]),'IN':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[29,-2,-3,-4,-5,-6,-7,-14,29,-28,29,29,-33,-8,-9,-10,29,-12,-13,29,29,29,29,29,29,29,29,29,29,29,-27,-31,-32,-34,-26,]),'CONS':([2,3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,],[30,-2,-3,-4,-5,-6,-7,-14,30,-28,30,30,-33,-8,-9,-10,30,-12,-13,30,30,30,30,30,30,30,30,30,30,30,-27,-31,-32,-34,-26,]),'COMMA':([3,4,5,6,7,8,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,62,64,],[-2,-3,-4,-5,-6,-7,-14,-25,-28,59,59,-33,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-27,-31,-32,-34,-26,]),'R_BRACK':([3,4,5,6,7,8,11,32,33,34,35,36,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,65,],[-2,-3,-4,-5,-6,-7,35,-14,-25,58,-28,-30,-33,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,64,-27,-31,-32,-34,-26,-29,]),'R_PAREN':([3,4,5,6,7,8,12,32,33,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,62,63,64,65,],[-2,-3,-4,-5,-6,-7,38,-14,-25,-28,-30,60,-33,61,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-27,-31,-32,-34,38,-26,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'line':([0,],[1,]),'expr':([0,9,10,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,59,63,],[2,32,33,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,36,36,]),'list':([0,9,10,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,59,63,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'tuple':([0,9,10,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,40,59,63,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,62,8,8,]),'sequence':([11,12,59,63,],[34,39,65,39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> line","S'",1,None,None,None),
  ('line -> expr SEMICOLON','line',2,'p_line','sbml.py',214),
  ('expr -> INTEGER','expr',1,'p_expr','sbml.py',218),
  ('expr -> FLOAT','expr',1,'p_expr','sbml.py',219),
  ('expr -> STRING','expr',1,'p_expr','sbml.py',220),
  ('expr -> BOOLEAN','expr',1,'p_expr','sbml.py',221),
  ('expr -> list','expr',1,'p_expr','sbml.py',222),
  ('expr -> tuple','expr',1,'p_expr','sbml.py',223),
  ('expr -> expr POW expr','expr',3,'p_binop_expr','sbml.py',227),
  ('expr -> expr MULT expr','expr',3,'p_binop_expr','sbml.py',228),
  ('expr -> expr DIV expr','expr',3,'p_binop_expr','sbml.py',229),
  ('expr -> expr MOD expr','expr',3,'p_binop_expr','sbml.py',230),
  ('expr -> expr PLUS expr','expr',3,'p_binop_expr','sbml.py',231),
  ('expr -> expr MINUS expr','expr',3,'p_binop_expr','sbml.py',232),
  ('expr -> MINUS expr','expr',2,'p_expr_uminus','sbml.py',236),
  ('expr -> expr AND_ALSO expr','expr',3,'p_boolop','sbml.py',240),
  ('expr -> expr OR_ELSE expr','expr',3,'p_boolop','sbml.py',241),
  ('expr -> expr LTE expr','expr',3,'p_boolop','sbml.py',242),
  ('expr -> expr GTE expr','expr',3,'p_boolop','sbml.py',243),
  ('expr -> expr EQ_EQ expr','expr',3,'p_boolop','sbml.py',244),
  ('expr -> expr NEQ expr','expr',3,'p_boolop','sbml.py',245),
  ('expr -> expr LT expr','expr',3,'p_boolop','sbml.py',246),
  ('expr -> expr GT expr','expr',3,'p_boolop','sbml.py',247),
  ('expr -> expr IN expr','expr',3,'p_listop','sbml.py',250),
  ('expr -> expr CONS expr','expr',3,'p_listop','sbml.py',251),
  ('expr -> NOT expr','expr',2,'p_negationOp','sbml.py',255),
  ('expr -> expr L_BRACK expr R_BRACK','expr',4,'p_list_index','sbml.py',260),
  ('list -> L_BRACK sequence R_BRACK','list',3,'p_list','sbml.py',265),
  ('list -> L_BRACK R_BRACK','list',2,'p_list','sbml.py',266),
  ('sequence -> expr COMMA sequence','sequence',3,'p_sequence','sbml.py',276),
  ('sequence -> expr','sequence',1,'p_sequence','sbml.py',277),
  ('expr -> L_PAREN expr R_PAREN','expr',3,'p_parenthesized','sbml.py',287),
  ('tuple -> L_PAREN sequence R_PAREN','tuple',3,'p_tuple','sbml.py',291),
  ('tuple -> L_PAREN R_PAREN','tuple',2,'p_tuple','sbml.py',292),
  ('expr -> HASHTAG INTEGER tuple','expr',3,'p_tuple_index','sbml.py',299),
]
