
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftAND_ALSOOR_ELSEleftEQ_EQNEQLTLTEGTGTErightCONSleftINleftMINUSPLUSleftMULTDIVDIVINTMODrightUMINUSrightPOWleftL_BRACKR_BRACKrightHASHTAGleftL_PARENR_PARENAND_ALSO BOOLEAN COLON COMMA CONS DIV DIVINT ELSE EQ EQ_EQ FLOAT FUN GT GTE HASHTAG IF IN INTEGER LC LT LTE L_BRACK L_PAREN MINUS MOD MULT NEQ NOT OR_ELSE PLUS POW PRINT RC R_BRACK R_PAREN SEMICOLON STRING VARIABLE WHILEprogram : fun_list block\n               | blockfun_list : fun_list fun_assignment\n                | fun_assignmentblock_list : block_list stmt_list\n                  | stmt_listblock_list : block_list block\n                  | blockcond_stmt : if\n                 | if_else\n                 | whilestmt_list : stmt_list stmt\n                 | stmtblock : LC block_list RC\n             | LC RCprint : PRINT L_PAREN expr R_PARENstmt : expr SEMICOLON\n            | print SEMICOLON\n            | assignment SEMICOLON\n            | cond_stmt\n            | fun_assignmentif_else : IF L_PAREN expr R_PAREN block ELSE blockif : IF L_PAREN expr R_PAREN blockwhile : WHILE L_PAREN expr R_PAREN blockexpr : INTEGER\n            | FLOAT\n            | STRING\n            | BOOLEAN\n            | fun_call\n            | VARIABLE\n            | list\n            | tuplefun_call : VARIABLE L_PAREN sequence R_PAREN\n                | VARIABLE L_PAREN  R_PARENfun_assignment : FUN VARIABLE L_PAREN sequence R_PAREN EQ block expr SEMICOLON\n                  | FUN VARIABLE L_PAREN R_PAREN EQ block expr SEMICOLONassignment : expr indexSequenceList EQ exprassignment : expr EQ exprexpr : HASHTAG INTEGER expr %prec HASHTAGtuple : L_PAREN sequence R_PAREN\n             | L_PAREN R_PARENexpr : expr POW expr\n            | expr MULT expr\n            | expr DIVINT expr\n            | expr DIV expr\n            | expr MOD expr\n            | expr PLUS expr\n            | expr MINUS exprexpr : MINUS expr %prec UMINUSexpr : expr AND_ALSO expr\n            | expr OR_ELSE expr\n            | expr LTE expr\n            | expr GTE expr\n            | expr EQ_EQ expr\n            | expr NEQ expr\n            | expr LT expr\n            | expr GT exprexpr : expr IN expr\n            | expr CONS exprexpr : NOT expr %prec UMINUSindexSequenceList : indexSequenceList indexTkn\n                         | indexTknindexTkn : L_BRACK expr R_BRACKexpr : expr L_BRACK expr R_BRACKlist : L_BRACK sequence R_BRACK\n            | L_BRACK R_BRACKsequence : expr COMMA sequence\n                   | exprexpr : L_PAREN expr R_PAREN'
    
_lr_action_items = {'LC':([0,2,4,5,8,9,10,11,12,13,17,18,33,34,35,39,40,41,42,43,65,66,123,124,126,129,130,131,133,136,138,139,],[5,5,-4,5,-3,5,-15,-6,-8,-13,-20,-21,-9,-10,-11,-14,-5,-7,-12,-17,-18,-19,5,5,5,-23,-24,5,5,-22,-36,-35,]),'FUN':([0,2,4,5,8,9,10,11,12,13,17,18,33,34,35,39,40,41,42,43,65,66,129,130,136,138,139,],[6,6,-4,6,-3,6,-15,6,-8,-13,-20,-21,-9,-10,-11,-14,6,-7,-12,-17,-18,-19,-23,-24,-22,-36,-35,]),'$end':([1,3,7,10,39,],[0,-2,-1,-15,-14,]),'RC':([5,9,10,11,12,13,17,18,33,34,35,39,40,41,42,43,65,66,129,130,136,138,139,],[10,39,-15,-6,-8,-13,-20,-21,-9,-10,-11,-14,-5,-7,-12,-17,-18,-19,-23,-24,-22,-36,-35,]),'INTEGER':([5,9,10,11,12,13,17,18,27,28,29,30,31,33,34,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,67,68,77,78,79,80,99,101,106,108,129,130,132,134,136,138,139,],[19,19,-15,19,-8,-13,-20,-21,68,19,19,19,19,-9,-10,-11,-14,19,-7,-12,-17,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-18,-19,19,19,19,19,19,19,19,19,19,19,-23,-24,19,19,-22,-36,-35,]),'FLOAT':([5,9,10,11,12,13,17,18,28,29,30,31,33,34,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,67,68,77,78,79,80,99,101,106,108,129,130,132,134,136,138,139,],[20,20,-15,20,-8,-13,-20,-21,20,20,20,20,-9,-10,-11,-14,20,-7,-12,-17,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-18,-19,20,20,20,20,20,20,20,20,20,20,-23,-24,20,20,-22,-36,-35,]),'STRING':([5,9,10,11,12,13,17,18,28,29,30,31,33,34,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,67,68,77,78,79,80,99,101,106,108,129,130,132,134,136,138,139,],[21,21,-15,21,-8,-13,-20,-21,21,21,21,21,-9,-10,-11,-14,21,-7,-12,-17,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-18,-19,21,21,21,21,21,21,21,21,21,21,-23,-24,21,21,-22,-36,-35,]),'BOOLEAN':([5,9,10,11,12,13,17,18,28,29,30,31,33,34,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,67,68,77,78,79,80,99,101,106,108,129,130,132,134,136,138,139,],[22,22,-15,22,-8,-13,-20,-21,22,22,22,22,-9,-10,-11,-14,22,-7,-12,-17,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-18,-19,22,22,22,22,22,22,22,22,22,22,-23,-24,22,22,-22,-36,-35,]),'VARIABLE':([5,6,9,10,11,12,13,17,18,28,29,30,31,33,34,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,67,68,77,78,79,80,99,101,106,108,129,130,132,134,136,138,139,],[24,38,24,-15,24,-8,-13,-20,-21,24,24,24,24,-9,-10,-11,-14,24,-7,-12,-17,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-18,-19,24,24,24,24,24,24,24,24,24,24,-23,-24,24,24,-22,-36,-35,]),'HASHTAG':([5,9,10,11,12,13,17,18,28,29,30,31,33,34,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,67,68,77,78,79,80,99,101,106,108,129,130,132,134,136,138,139,],[27,27,-15,27,-8,-13,-20,-21,27,27,27,27,-9,-10,-11,-14,27,-7,-12,-17,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-18,-19,27,27,27,27,27,27,27,27,27,27,-23,-24,27,27,-22,-36,-35,]),'MINUS':([5,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,28,29,30,31,33,34,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,67,68,69,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,104,105,106,107,108,109,110,111,112,113,116,117,118,119,120,128,129,130,132,134,135,136,137,138,139,],[28,28,-15,28,-8,-13,50,-20,-21,-25,-26,-27,-28,-29,-30,-31,-32,28,28,28,28,-9,-10,-11,-14,28,-7,-12,-17,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-18,-19,28,28,-49,-60,-66,50,50,-41,28,28,28,28,-42,-43,-44,-45,-46,-47,-48,50,50,50,50,50,50,50,50,50,50,50,28,28,50,-34,-39,28,-65,28,-69,-40,50,50,50,-64,50,50,-33,50,-64,-23,-24,28,28,50,-22,50,-36,-35,]),'NOT':([5,9,10,11,12,13,17,18,28,29,30,31,33,34,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,67,68,77,78,79,80,99,101,106,108,129,130,132,134,136,138,139,],[29,29,-15,29,-8,-13,-20,-21,29,29,29,29,-9,-10,-11,-14,29,-7,-12,-17,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-18,-19,29,29,29,29,29,29,29,29,29,29,-23,-24,29,29,-22,-36,-35,]),'L_PAREN':([5,9,10,11,12,13,17,18,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,67,68,77,78,79,80,99,101,106,108,129,130,132,134,136,138,139,],[31,31,-15,31,-8,-13,-20,-21,67,31,31,31,31,77,-9,-10,-11,78,79,80,-14,31,-7,-12,-17,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-18,-19,31,31,31,31,31,31,31,31,31,31,-23,-24,31,31,-22,-36,-35,]),'PRINT':([5,9,10,11,12,13,17,18,33,34,35,39,40,41,42,43,65,66,129,130,136,138,139,],[32,32,-15,32,-8,-13,-20,-21,-9,-10,-11,-14,32,-7,-12,-17,-18,-19,-23,-24,-22,-36,-35,]),'L_BRACK':([5,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,28,29,30,31,33,34,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,116,117,118,119,120,127,128,129,130,132,134,135,136,137,138,139,],[30,30,-15,30,-8,-13,61,-20,-21,-25,-26,-27,-28,-29,-30,-31,-32,30,30,30,30,-9,-10,-11,-14,30,-7,-12,-17,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,101,30,-62,-18,-19,30,30,106,106,-66,106,106,-41,30,30,30,30,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,30,-61,30,106,-34,-39,30,-65,30,-69,-40,106,106,106,-63,106,106,-33,106,-63,-64,-23,-24,30,30,106,-22,106,-36,-35,]),'IF':([5,9,10,11,12,13,17,18,33,34,35,39,40,41,42,43,65,66,129,130,136,138,139,],[36,36,-15,36,-8,-13,-20,-21,-9,-10,-11,-14,36,-7,-12,-17,-18,-19,-23,-24,-22,-36,-35,]),'WHILE':([5,9,10,11,12,13,17,18,33,34,35,39,40,41,42,43,65,66,129,130,136,138,139,],[37,37,-15,37,-8,-13,-20,-21,-9,-10,-11,-14,37,-7,-12,-17,-18,-19,-23,-24,-22,-36,-35,]),'ELSE':([10,39,129,],[-15,-14,133,]),'SEMICOLON':([14,15,16,19,20,21,22,23,24,25,26,69,70,72,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,102,104,105,107,109,110,116,117,119,122,128,135,137,],[43,65,66,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,-41,-42,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-38,-34,-39,-65,-69,-40,-64,-37,-33,-16,-64,138,139,]),'POW':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[44,-25,-26,-27,-28,-29,-30,-31,-32,44,44,-66,44,44,-41,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-34,-39,-65,-69,-40,44,44,44,-64,44,44,-33,44,-64,44,44,]),'MULT':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[45,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,45,45,-41,-42,-43,-44,-45,-46,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-34,-39,-65,-69,-40,45,45,45,-64,45,45,-33,45,-64,45,45,]),'DIVINT':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[46,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,46,46,-41,-42,-43,-44,-45,-46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-34,-39,-65,-69,-40,46,46,46,-64,46,46,-33,46,-64,46,46,]),'DIV':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[47,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,47,47,-41,-42,-43,-44,-45,-46,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-34,-39,-65,-69,-40,47,47,47,-64,47,47,-33,47,-64,47,47,]),'MOD':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[48,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,48,48,-41,-42,-43,-44,-45,-46,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-34,-39,-65,-69,-40,48,48,48,-64,48,48,-33,48,-64,48,48,]),'PLUS':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[49,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,49,49,-41,-42,-43,-44,-45,-46,-47,-48,49,49,49,49,49,49,49,49,49,49,49,49,-34,-39,-65,-69,-40,49,49,49,-64,49,49,-33,49,-64,49,49,]),'AND_ALSO':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[51,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,51,51,-41,-42,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,51,51,-34,-39,-65,-69,-40,51,51,51,-64,51,51,-33,51,-64,51,51,]),'OR_ELSE':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[52,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,52,52,-41,-42,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,52,52,-34,-39,-65,-69,-40,52,52,52,-64,52,52,-33,52,-64,52,52,]),'LTE':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[53,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,53,53,-41,-42,-43,-44,-45,-46,-47,-48,53,53,-52,-53,-54,-55,-56,-57,-58,-59,53,53,-34,-39,-65,-69,-40,53,53,53,-64,53,53,-33,53,-64,53,53,]),'GTE':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[54,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,54,54,-41,-42,-43,-44,-45,-46,-47,-48,54,54,-52,-53,-54,-55,-56,-57,-58,-59,54,54,-34,-39,-65,-69,-40,54,54,54,-64,54,54,-33,54,-64,54,54,]),'EQ_EQ':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[55,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,55,55,-41,-42,-43,-44,-45,-46,-47,-48,55,55,-52,-53,-54,-55,-56,-57,-58,-59,55,55,-34,-39,-65,-69,-40,55,55,55,-64,55,55,-33,55,-64,55,55,]),'NEQ':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[56,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,56,56,-41,-42,-43,-44,-45,-46,-47,-48,56,56,-52,-53,-54,-55,-56,-57,-58,-59,56,56,-34,-39,-65,-69,-40,56,56,56,-64,56,56,-33,56,-64,56,56,]),'LT':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[57,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,57,57,-41,-42,-43,-44,-45,-46,-47,-48,57,57,-52,-53,-54,-55,-56,-57,-58,-59,57,57,-34,-39,-65,-69,-40,57,57,57,-64,57,57,-33,57,-64,57,57,]),'GT':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[58,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,58,58,-41,-42,-43,-44,-45,-46,-47,-48,58,58,-52,-53,-54,-55,-56,-57,-58,-59,58,58,-34,-39,-65,-69,-40,58,58,58,-64,58,58,-33,58,-64,58,58,]),'IN':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[59,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,59,59,-41,-42,-43,-44,-45,-46,-47,-48,59,59,59,59,59,59,59,59,-58,59,59,59,-34,-39,-65,-69,-40,59,59,59,-64,59,59,-33,59,-64,59,59,]),'CONS':([14,19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,107,109,110,111,112,113,116,117,118,119,120,128,135,137,],[60,-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,60,60,-41,-42,-43,-44,-45,-46,-47,-48,60,60,60,60,60,60,60,60,-58,60,60,60,-34,-39,-65,-69,-40,60,60,60,-64,60,60,-33,60,-64,60,60,]),'EQ':([14,19,20,21,22,23,24,25,26,62,64,69,70,72,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,100,104,105,107,109,110,115,116,119,125,127,128,],[63,-25,-26,-27,-28,-29,-30,-31,-32,99,-62,-49,-60,-66,-41,-42,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-34,-39,-65,-69,-40,126,-63,-33,131,-63,-64,]),'COMMA':([19,20,21,22,23,24,25,26,69,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,104,105,107,109,110,119,128,],[-25,-26,-27,-28,-29,-30,-31,-32,-49,-60,-66,108,108,-41,-42,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-34,-39,-65,-69,-40,-33,-64,]),'R_BRACK':([19,20,21,22,23,24,25,26,30,69,70,71,72,73,75,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,104,105,107,109,110,118,119,120,121,128,],[-25,-26,-27,-28,-29,-30,-31,-32,72,-49,-60,107,-66,-68,-41,-42,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,116,-34,-39,-65,-69,-40,127,-33,128,-67,-64,]),'R_PAREN':([19,20,21,22,23,24,25,26,31,67,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,103,104,105,107,109,110,111,112,113,114,119,121,128,],[-25,-26,-27,-28,-29,-30,-31,-32,75,104,-49,-60,-66,-68,109,-41,110,115,-42,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,119,-34,-39,-65,-69,-40,122,123,124,125,-33,-67,-64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'fun_list':([0,],[2,]),'block':([0,2,5,9,123,124,126,131,133,],[3,7,12,41,129,130,132,134,136,]),'fun_assignment':([0,2,5,9,11,40,],[4,8,18,18,18,18,]),'block_list':([5,],[9,]),'stmt_list':([5,9,],[11,40,]),'stmt':([5,9,11,40,],[13,13,42,42,]),'expr':([5,9,11,28,29,30,31,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,67,68,77,78,79,80,99,101,106,108,132,134,],[14,14,14,69,70,73,74,14,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,73,105,111,112,113,73,117,118,120,73,135,137,]),'print':([5,9,11,40,],[15,15,15,15,]),'assignment':([5,9,11,40,],[16,16,16,16,]),'cond_stmt':([5,9,11,40,],[17,17,17,17,]),'fun_call':([5,9,11,28,29,30,31,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,67,68,77,78,79,80,99,101,106,108,132,134,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'list':([5,9,11,28,29,30,31,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,67,68,77,78,79,80,99,101,106,108,132,134,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'tuple':([5,9,11,28,29,30,31,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,67,68,77,78,79,80,99,101,106,108,132,134,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'if':([5,9,11,40,],[33,33,33,33,]),'if_else':([5,9,11,40,],[34,34,34,34,]),'while':([5,9,11,40,],[35,35,35,35,]),'indexSequenceList':([14,],[62,]),'indexTkn':([14,62,],[64,100,]),'sequence':([30,31,67,80,108,],[71,76,103,114,121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> fun_list block','program',2,'p_program','sbml.py',490),
  ('program -> block','program',1,'p_program','sbml.py',491),
  ('fun_list -> fun_list fun_assignment','fun_list',2,'p_fun_list','sbml.py',505),
  ('fun_list -> fun_assignment','fun_list',1,'p_fun_list','sbml.py',506),
  ('block_list -> block_list stmt_list','block_list',2,'p_block_stmt_list','sbml.py',514),
  ('block_list -> stmt_list','block_list',1,'p_block_stmt_list','sbml.py',515),
  ('block_list -> block_list block','block_list',2,'p_block_list','sbml.py',522),
  ('block_list -> block','block_list',1,'p_block_list','sbml.py',523),
  ('cond_stmt -> if','cond_stmt',1,'p_cond_stmt','sbml.py',539),
  ('cond_stmt -> if_else','cond_stmt',1,'p_cond_stmt','sbml.py',540),
  ('cond_stmt -> while','cond_stmt',1,'p_cond_stmt','sbml.py',541),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','sbml.py',545),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','sbml.py',546),
  ('block -> LC block_list RC','block',3,'p_block','sbml.py',553),
  ('block -> LC RC','block',2,'p_block','sbml.py',554),
  ('print -> PRINT L_PAREN expr R_PAREN','print',4,'p_print','sbml.py',561),
  ('stmt -> expr SEMICOLON','stmt',2,'p_stmt','sbml.py',564),
  ('stmt -> print SEMICOLON','stmt',2,'p_stmt','sbml.py',565),
  ('stmt -> assignment SEMICOLON','stmt',2,'p_stmt','sbml.py',566),
  ('stmt -> cond_stmt','stmt',1,'p_stmt','sbml.py',567),
  ('stmt -> fun_assignment','stmt',1,'p_stmt','sbml.py',568),
  ('if_else -> IF L_PAREN expr R_PAREN block ELSE block','if_else',7,'p_if_else','sbml.py',572),
  ('if -> IF L_PAREN expr R_PAREN block','if',5,'p_if','sbml.py',576),
  ('while -> WHILE L_PAREN expr R_PAREN block','while',5,'p_while','sbml.py',580),
  ('expr -> INTEGER','expr',1,'p_expr','sbml.py',586),
  ('expr -> FLOAT','expr',1,'p_expr','sbml.py',587),
  ('expr -> STRING','expr',1,'p_expr','sbml.py',588),
  ('expr -> BOOLEAN','expr',1,'p_expr','sbml.py',589),
  ('expr -> fun_call','expr',1,'p_expr','sbml.py',590),
  ('expr -> VARIABLE','expr',1,'p_expr','sbml.py',591),
  ('expr -> list','expr',1,'p_expr','sbml.py',592),
  ('expr -> tuple','expr',1,'p_expr','sbml.py',593),
  ('fun_call -> VARIABLE L_PAREN sequence R_PAREN','fun_call',4,'p_fun_call','sbml.py',599),
  ('fun_call -> VARIABLE L_PAREN R_PAREN','fun_call',3,'p_fun_call','sbml.py',600),
  ('fun_assignment -> FUN VARIABLE L_PAREN sequence R_PAREN EQ block expr SEMICOLON','fun_assignment',9,'p_fun_assignment','sbml.py',609),
  ('fun_assignment -> FUN VARIABLE L_PAREN R_PAREN EQ block expr SEMICOLON','fun_assignment',8,'p_fun_assignment','sbml.py',610),
  ('assignment -> expr indexSequenceList EQ expr','assignment',4,'p_list_assignment','sbml.py',620),
  ('assignment -> expr EQ expr','assignment',3,'p_assignment','sbml.py',624),
  ('expr -> HASHTAG INTEGER expr','expr',3,'p_tuple_index','sbml.py',629),
  ('tuple -> L_PAREN sequence R_PAREN','tuple',3,'p_tuple','sbml.py',633),
  ('tuple -> L_PAREN R_PAREN','tuple',2,'p_tuple','sbml.py',634),
  ('expr -> expr POW expr','expr',3,'p_binop_expr','sbml.py',641),
  ('expr -> expr MULT expr','expr',3,'p_binop_expr','sbml.py',642),
  ('expr -> expr DIVINT expr','expr',3,'p_binop_expr','sbml.py',643),
  ('expr -> expr DIV expr','expr',3,'p_binop_expr','sbml.py',644),
  ('expr -> expr MOD expr','expr',3,'p_binop_expr','sbml.py',645),
  ('expr -> expr PLUS expr','expr',3,'p_binop_expr','sbml.py',646),
  ('expr -> expr MINUS expr','expr',3,'p_binop_expr','sbml.py',647),
  ('expr -> MINUS expr','expr',2,'p_expr_uminus','sbml.py',651),
  ('expr -> expr AND_ALSO expr','expr',3,'p_boolop','sbml.py',655),
  ('expr -> expr OR_ELSE expr','expr',3,'p_boolop','sbml.py',656),
  ('expr -> expr LTE expr','expr',3,'p_boolop','sbml.py',657),
  ('expr -> expr GTE expr','expr',3,'p_boolop','sbml.py',658),
  ('expr -> expr EQ_EQ expr','expr',3,'p_boolop','sbml.py',659),
  ('expr -> expr NEQ expr','expr',3,'p_boolop','sbml.py',660),
  ('expr -> expr LT expr','expr',3,'p_boolop','sbml.py',661),
  ('expr -> expr GT expr','expr',3,'p_boolop','sbml.py',662),
  ('expr -> expr IN expr','expr',3,'p_listop','sbml.py',666),
  ('expr -> expr CONS expr','expr',3,'p_listop','sbml.py',667),
  ('expr -> NOT expr','expr',2,'p_negationOp','sbml.py',671),
  ('indexSequenceList -> indexSequenceList indexTkn','indexSequenceList',2,'p_index_sequence_list','sbml.py',676),
  ('indexSequenceList -> indexTkn','indexSequenceList',1,'p_index_sequence_list','sbml.py',677),
  ('indexTkn -> L_BRACK expr R_BRACK','indexTkn',3,'p_index_tkn','sbml.py',684),
  ('expr -> expr L_BRACK expr R_BRACK','expr',4,'p_list_index','sbml.py',688),
  ('list -> L_BRACK sequence R_BRACK','list',3,'p_list','sbml.py',692),
  ('list -> L_BRACK R_BRACK','list',2,'p_list','sbml.py',693),
  ('sequence -> expr COMMA sequence','sequence',3,'p_sequence','sbml.py',700),
  ('sequence -> expr','sequence',1,'p_sequence','sbml.py',701),
  ('expr -> L_PAREN expr R_PAREN','expr',3,'p_parenthesized','sbml.py',708),
]
