Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    BOOLEAN
    COLON
    EQ

Grammar

Rule 0     S' -> line
Rule 1     line -> expr SEMICOLON
Rule 2     expr -> INTEGER
Rule 3     expr -> FLOAT
Rule 4     expr -> STRING
Rule 5     expr -> list
Rule 6     expr -> tuple
Rule 7     expr -> expr POW expr
Rule 8     expr -> expr MULT expr
Rule 9     expr -> expr DIV expr
Rule 10    expr -> expr MOD expr
Rule 11    expr -> expr PLUS expr
Rule 12    expr -> expr MINUS expr
Rule 13    expr -> MINUS expr
Rule 14    expr -> expr AND_ALSO expr
Rule 15    expr -> expr OR_ELSE expr
Rule 16    expr -> expr LTE expr
Rule 17    expr -> expr GTE expr
Rule 18    expr -> expr EQ_EQ expr
Rule 19    expr -> expr NEQ expr
Rule 20    expr -> expr LT expr
Rule 21    expr -> expr GT expr
Rule 22    expr -> expr IN expr
Rule 23    expr -> expr CONS expr
Rule 24    expr -> NOT expr
Rule 25    sequence -> expr COMMA sequence
Rule 26    sequence -> expr
Rule 27    list -> L_BRACK sequence R_BRACK
Rule 28    list -> L_BRACK R_BRACK
Rule 29    expr -> list L_BRACK expr R_BRACK
Rule 30    expr -> L_PAREN expr R_PAREN
Rule 31    tuple -> L_PAREN sequence R_PAREN
Rule 32    tuple -> L_PAREN R_PAREN
Rule 33    expr -> HASHTAG INTEGER tuple

Terminals, with rules where they appear

AND_ALSO             : 14
BOOL                 : 
BOOLEAN              : 
COLON                : 
COMMA                : 25
CONS                 : 23
DIV                  : 9
EQ                   : 
EQ_EQ                : 18
FLOAT                : 3
GT                   : 21
GTE                  : 17
HASHTAG              : 33
IN                   : 22
INTEGER              : 2 33
LT                   : 20
LTE                  : 16
L_BRACK              : 27 28 29
L_PAREN              : 30 31 32
MINUS                : 12 13
MOD                  : 10
MULT                 : 8
NEQ                  : 19
NOT                  : 24
OR_ELSE              : 15
PLUS                 : 11
POW                  : 7
R_BRACK              : 27 28 29
R_PAREN              : 30 31 32
SEMICOLON            : 1
STRING               : 4
error                : 

Nonterminals, with rules where they appear

expr                 : 1 7 7 8 8 9 9 10 10 11 11 12 12 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 25 26 29 30
line                 : 0
list                 : 5 29
sequence             : 25 27 31
tuple                : 6 33

Parsing method: LALR

state 0

    (0) S' -> . line
    (1) line -> . expr SEMICOLON
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    line                           shift and go to state 1
    expr                           shift and go to state 2
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 1

    (0) S' -> line .



state 2

    (1) line -> expr . SEMICOLON
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

    SEMICOLON       shift and go to state 13
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29


state 3

    (2) expr -> INTEGER .

    SEMICOLON       reduce using rule 2 (expr -> INTEGER .)
    POW             reduce using rule 2 (expr -> INTEGER .)
    MULT            reduce using rule 2 (expr -> INTEGER .)
    DIV             reduce using rule 2 (expr -> INTEGER .)
    MOD             reduce using rule 2 (expr -> INTEGER .)
    PLUS            reduce using rule 2 (expr -> INTEGER .)
    MINUS           reduce using rule 2 (expr -> INTEGER .)
    AND_ALSO        reduce using rule 2 (expr -> INTEGER .)
    OR_ELSE         reduce using rule 2 (expr -> INTEGER .)
    LTE             reduce using rule 2 (expr -> INTEGER .)
    GTE             reduce using rule 2 (expr -> INTEGER .)
    EQ_EQ           reduce using rule 2 (expr -> INTEGER .)
    NEQ             reduce using rule 2 (expr -> INTEGER .)
    LT              reduce using rule 2 (expr -> INTEGER .)
    GT              reduce using rule 2 (expr -> INTEGER .)
    IN              reduce using rule 2 (expr -> INTEGER .)
    CONS            reduce using rule 2 (expr -> INTEGER .)
    COMMA           reduce using rule 2 (expr -> INTEGER .)
    R_BRACK         reduce using rule 2 (expr -> INTEGER .)
    R_PAREN         reduce using rule 2 (expr -> INTEGER .)


state 4

    (3) expr -> FLOAT .

    SEMICOLON       reduce using rule 3 (expr -> FLOAT .)
    POW             reduce using rule 3 (expr -> FLOAT .)
    MULT            reduce using rule 3 (expr -> FLOAT .)
    DIV             reduce using rule 3 (expr -> FLOAT .)
    MOD             reduce using rule 3 (expr -> FLOAT .)
    PLUS            reduce using rule 3 (expr -> FLOAT .)
    MINUS           reduce using rule 3 (expr -> FLOAT .)
    AND_ALSO        reduce using rule 3 (expr -> FLOAT .)
    OR_ELSE         reduce using rule 3 (expr -> FLOAT .)
    LTE             reduce using rule 3 (expr -> FLOAT .)
    GTE             reduce using rule 3 (expr -> FLOAT .)
    EQ_EQ           reduce using rule 3 (expr -> FLOAT .)
    NEQ             reduce using rule 3 (expr -> FLOAT .)
    LT              reduce using rule 3 (expr -> FLOAT .)
    GT              reduce using rule 3 (expr -> FLOAT .)
    IN              reduce using rule 3 (expr -> FLOAT .)
    CONS            reduce using rule 3 (expr -> FLOAT .)
    COMMA           reduce using rule 3 (expr -> FLOAT .)
    R_BRACK         reduce using rule 3 (expr -> FLOAT .)
    R_PAREN         reduce using rule 3 (expr -> FLOAT .)


state 5

    (4) expr -> STRING .

    SEMICOLON       reduce using rule 4 (expr -> STRING .)
    POW             reduce using rule 4 (expr -> STRING .)
    MULT            reduce using rule 4 (expr -> STRING .)
    DIV             reduce using rule 4 (expr -> STRING .)
    MOD             reduce using rule 4 (expr -> STRING .)
    PLUS            reduce using rule 4 (expr -> STRING .)
    MINUS           reduce using rule 4 (expr -> STRING .)
    AND_ALSO        reduce using rule 4 (expr -> STRING .)
    OR_ELSE         reduce using rule 4 (expr -> STRING .)
    LTE             reduce using rule 4 (expr -> STRING .)
    GTE             reduce using rule 4 (expr -> STRING .)
    EQ_EQ           reduce using rule 4 (expr -> STRING .)
    NEQ             reduce using rule 4 (expr -> STRING .)
    LT              reduce using rule 4 (expr -> STRING .)
    GT              reduce using rule 4 (expr -> STRING .)
    IN              reduce using rule 4 (expr -> STRING .)
    CONS            reduce using rule 4 (expr -> STRING .)
    COMMA           reduce using rule 4 (expr -> STRING .)
    R_BRACK         reduce using rule 4 (expr -> STRING .)
    R_PAREN         reduce using rule 4 (expr -> STRING .)


state 6

    (5) expr -> list .
    (29) expr -> list . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 5 (expr -> list .)
    POW             reduce using rule 5 (expr -> list .)
    MULT            reduce using rule 5 (expr -> list .)
    DIV             reduce using rule 5 (expr -> list .)
    MOD             reduce using rule 5 (expr -> list .)
    PLUS            reduce using rule 5 (expr -> list .)
    MINUS           reduce using rule 5 (expr -> list .)
    AND_ALSO        reduce using rule 5 (expr -> list .)
    OR_ELSE         reduce using rule 5 (expr -> list .)
    LTE             reduce using rule 5 (expr -> list .)
    GTE             reduce using rule 5 (expr -> list .)
    EQ_EQ           reduce using rule 5 (expr -> list .)
    NEQ             reduce using rule 5 (expr -> list .)
    LT              reduce using rule 5 (expr -> list .)
    GT              reduce using rule 5 (expr -> list .)
    IN              reduce using rule 5 (expr -> list .)
    CONS            reduce using rule 5 (expr -> list .)
    COMMA           reduce using rule 5 (expr -> list .)
    R_BRACK         reduce using rule 5 (expr -> list .)
    R_PAREN         reduce using rule 5 (expr -> list .)
    L_BRACK         shift and go to state 30


state 7

    (6) expr -> tuple .

    SEMICOLON       reduce using rule 6 (expr -> tuple .)
    POW             reduce using rule 6 (expr -> tuple .)
    MULT            reduce using rule 6 (expr -> tuple .)
    DIV             reduce using rule 6 (expr -> tuple .)
    MOD             reduce using rule 6 (expr -> tuple .)
    PLUS            reduce using rule 6 (expr -> tuple .)
    MINUS           reduce using rule 6 (expr -> tuple .)
    AND_ALSO        reduce using rule 6 (expr -> tuple .)
    OR_ELSE         reduce using rule 6 (expr -> tuple .)
    LTE             reduce using rule 6 (expr -> tuple .)
    GTE             reduce using rule 6 (expr -> tuple .)
    EQ_EQ           reduce using rule 6 (expr -> tuple .)
    NEQ             reduce using rule 6 (expr -> tuple .)
    LT              reduce using rule 6 (expr -> tuple .)
    GT              reduce using rule 6 (expr -> tuple .)
    IN              reduce using rule 6 (expr -> tuple .)
    CONS            reduce using rule 6 (expr -> tuple .)
    COMMA           reduce using rule 6 (expr -> tuple .)
    R_BRACK         reduce using rule 6 (expr -> tuple .)
    R_PAREN         reduce using rule 6 (expr -> tuple .)


state 8

    (13) expr -> MINUS . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 31
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 9

    (24) expr -> NOT . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 32
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 10

    (27) list -> L_BRACK . sequence R_BRACK
    (28) list -> L_BRACK . R_BRACK
    (25) sequence -> . expr COMMA sequence
    (26) sequence -> . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    R_BRACK         shift and go to state 34
    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    sequence                       shift and go to state 33
    expr                           shift and go to state 35
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 11

    (30) expr -> L_PAREN . expr R_PAREN
    (31) tuple -> L_PAREN . sequence R_PAREN
    (32) tuple -> L_PAREN . R_PAREN
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (25) sequence -> . expr COMMA sequence
    (26) sequence -> . expr
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    R_PAREN         shift and go to state 37
    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 36
    sequence                       shift and go to state 38
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 12

    (33) expr -> HASHTAG . INTEGER tuple

    INTEGER         shift and go to state 39


state 13

    (1) line -> expr SEMICOLON .

    $end            reduce using rule 1 (line -> expr SEMICOLON .)


state 14

    (7) expr -> expr POW . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 40
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 15

    (8) expr -> expr MULT . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 41
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 16

    (9) expr -> expr DIV . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 42
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 17

    (10) expr -> expr MOD . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 43
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 18

    (11) expr -> expr PLUS . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 44
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 19

    (12) expr -> expr MINUS . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 45
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 20

    (14) expr -> expr AND_ALSO . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 46
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 21

    (15) expr -> expr OR_ELSE . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 47
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 22

    (16) expr -> expr LTE . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 48
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 23

    (17) expr -> expr GTE . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 49
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 24

    (18) expr -> expr EQ_EQ . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 50
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 25

    (19) expr -> expr NEQ . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 51
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 26

    (20) expr -> expr LT . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 52
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 27

    (21) expr -> expr GT . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 53
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 28

    (22) expr -> expr IN . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 54
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 29

    (23) expr -> expr CONS . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 55
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 30

    (29) expr -> list L_BRACK . expr R_BRACK
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    list                           shift and go to state 6
    expr                           shift and go to state 56
    tuple                          shift and go to state 7

state 31

    (13) expr -> MINUS expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

    SEMICOLON       reduce using rule 13 (expr -> MINUS expr .)
    POW             reduce using rule 13 (expr -> MINUS expr .)
    MULT            reduce using rule 13 (expr -> MINUS expr .)
    DIV             reduce using rule 13 (expr -> MINUS expr .)
    MOD             reduce using rule 13 (expr -> MINUS expr .)
    PLUS            reduce using rule 13 (expr -> MINUS expr .)
    MINUS           reduce using rule 13 (expr -> MINUS expr .)
    AND_ALSO        reduce using rule 13 (expr -> MINUS expr .)
    OR_ELSE         reduce using rule 13 (expr -> MINUS expr .)
    LTE             reduce using rule 13 (expr -> MINUS expr .)
    GTE             reduce using rule 13 (expr -> MINUS expr .)
    EQ_EQ           reduce using rule 13 (expr -> MINUS expr .)
    NEQ             reduce using rule 13 (expr -> MINUS expr .)
    LT              reduce using rule 13 (expr -> MINUS expr .)
    GT              reduce using rule 13 (expr -> MINUS expr .)
    IN              reduce using rule 13 (expr -> MINUS expr .)
    CONS            reduce using rule 13 (expr -> MINUS expr .)
    COMMA           reduce using rule 13 (expr -> MINUS expr .)
    R_BRACK         reduce using rule 13 (expr -> MINUS expr .)
    R_PAREN         reduce using rule 13 (expr -> MINUS expr .)

  ! POW             [ shift and go to state 14 ]
  ! MULT            [ shift and go to state 15 ]
  ! DIV             [ shift and go to state 16 ]
  ! MOD             [ shift and go to state 17 ]
  ! PLUS            [ shift and go to state 18 ]
  ! MINUS           [ shift and go to state 19 ]
  ! AND_ALSO        [ shift and go to state 20 ]
  ! OR_ELSE         [ shift and go to state 21 ]
  ! LTE             [ shift and go to state 22 ]
  ! GTE             [ shift and go to state 23 ]
  ! EQ_EQ           [ shift and go to state 24 ]
  ! NEQ             [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]
  ! IN              [ shift and go to state 28 ]
  ! CONS            [ shift and go to state 29 ]


state 32

    (24) expr -> NOT expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 24 (expr -> NOT expr .)
    COMMA           reduce using rule 24 (expr -> NOT expr .)
    R_BRACK         reduce using rule 24 (expr -> NOT expr .)
    R_PAREN         reduce using rule 24 (expr -> NOT expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 24 (expr -> NOT expr .) ]
  ! MULT            [ reduce using rule 24 (expr -> NOT expr .) ]
  ! DIV             [ reduce using rule 24 (expr -> NOT expr .) ]
  ! MOD             [ reduce using rule 24 (expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 24 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> NOT expr .) ]
  ! AND_ALSO        [ reduce using rule 24 (expr -> NOT expr .) ]
  ! OR_ELSE         [ reduce using rule 24 (expr -> NOT expr .) ]
  ! LTE             [ reduce using rule 24 (expr -> NOT expr .) ]
  ! GTE             [ reduce using rule 24 (expr -> NOT expr .) ]
  ! EQ_EQ           [ reduce using rule 24 (expr -> NOT expr .) ]
  ! NEQ             [ reduce using rule 24 (expr -> NOT expr .) ]
  ! LT              [ reduce using rule 24 (expr -> NOT expr .) ]
  ! GT              [ reduce using rule 24 (expr -> NOT expr .) ]
  ! IN              [ reduce using rule 24 (expr -> NOT expr .) ]
  ! CONS            [ reduce using rule 24 (expr -> NOT expr .) ]


state 33

    (27) list -> L_BRACK sequence . R_BRACK

    R_BRACK         shift and go to state 57


state 34

    (28) list -> L_BRACK R_BRACK .

    L_BRACK         reduce using rule 28 (list -> L_BRACK R_BRACK .)
    SEMICOLON       reduce using rule 28 (list -> L_BRACK R_BRACK .)
    POW             reduce using rule 28 (list -> L_BRACK R_BRACK .)
    MULT            reduce using rule 28 (list -> L_BRACK R_BRACK .)
    DIV             reduce using rule 28 (list -> L_BRACK R_BRACK .)
    MOD             reduce using rule 28 (list -> L_BRACK R_BRACK .)
    PLUS            reduce using rule 28 (list -> L_BRACK R_BRACK .)
    MINUS           reduce using rule 28 (list -> L_BRACK R_BRACK .)
    AND_ALSO        reduce using rule 28 (list -> L_BRACK R_BRACK .)
    OR_ELSE         reduce using rule 28 (list -> L_BRACK R_BRACK .)
    LTE             reduce using rule 28 (list -> L_BRACK R_BRACK .)
    GTE             reduce using rule 28 (list -> L_BRACK R_BRACK .)
    EQ_EQ           reduce using rule 28 (list -> L_BRACK R_BRACK .)
    NEQ             reduce using rule 28 (list -> L_BRACK R_BRACK .)
    LT              reduce using rule 28 (list -> L_BRACK R_BRACK .)
    GT              reduce using rule 28 (list -> L_BRACK R_BRACK .)
    IN              reduce using rule 28 (list -> L_BRACK R_BRACK .)
    CONS            reduce using rule 28 (list -> L_BRACK R_BRACK .)
    COMMA           reduce using rule 28 (list -> L_BRACK R_BRACK .)
    R_BRACK         reduce using rule 28 (list -> L_BRACK R_BRACK .)
    R_PAREN         reduce using rule 28 (list -> L_BRACK R_BRACK .)


state 35

    (25) sequence -> expr . COMMA sequence
    (26) sequence -> expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

    COMMA           shift and go to state 58
    R_BRACK         reduce using rule 26 (sequence -> expr .)
    R_PAREN         reduce using rule 26 (sequence -> expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29


state 36

    (30) expr -> L_PAREN expr . R_PAREN
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr
    (25) sequence -> expr . COMMA sequence
    (26) sequence -> expr .

  ! shift/reduce conflict for R_PAREN resolved as shift
    R_PAREN         shift and go to state 59
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29
    COMMA           shift and go to state 58

  ! R_PAREN         [ reduce using rule 26 (sequence -> expr .) ]


state 37

    (32) tuple -> L_PAREN R_PAREN .

    SEMICOLON       reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    POW             reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    MULT            reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    DIV             reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    MOD             reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    PLUS            reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    MINUS           reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    AND_ALSO        reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    OR_ELSE         reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    LTE             reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    GTE             reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    EQ_EQ           reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    NEQ             reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    LT              reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    GT              reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    IN              reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    CONS            reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    COMMA           reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    R_BRACK         reduce using rule 32 (tuple -> L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 32 (tuple -> L_PAREN R_PAREN .)


state 38

    (31) tuple -> L_PAREN sequence . R_PAREN

    R_PAREN         shift and go to state 60


state 39

    (33) expr -> HASHTAG INTEGER . tuple
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    L_PAREN         shift and go to state 62

    tuple                          shift and go to state 61

state 40

    (7) expr -> expr POW expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 7 (expr -> expr POW expr .)
    COMMA           reduce using rule 7 (expr -> expr POW expr .)
    R_BRACK         reduce using rule 7 (expr -> expr POW expr .)
    R_PAREN         reduce using rule 7 (expr -> expr POW expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! MULT            [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! DIV             [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! MOD             [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! PLUS            [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! MINUS           [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! AND_ALSO        [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! OR_ELSE         [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! LTE             [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! GTE             [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! EQ_EQ           [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! NEQ             [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! LT              [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! GT              [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! IN              [ reduce using rule 7 (expr -> expr POW expr .) ]
  ! CONS            [ reduce using rule 7 (expr -> expr POW expr .) ]


state 41

    (8) expr -> expr MULT expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 8 (expr -> expr MULT expr .)
    COMMA           reduce using rule 8 (expr -> expr MULT expr .)
    R_BRACK         reduce using rule 8 (expr -> expr MULT expr .)
    R_PAREN         reduce using rule 8 (expr -> expr MULT expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! MULT            [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! DIV             [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! MOD             [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! PLUS            [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! MINUS           [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! AND_ALSO        [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! OR_ELSE         [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! LTE             [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! GTE             [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! EQ_EQ           [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! NEQ             [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! LT              [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! GT              [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! IN              [ reduce using rule 8 (expr -> expr MULT expr .) ]
  ! CONS            [ reduce using rule 8 (expr -> expr MULT expr .) ]


state 42

    (9) expr -> expr DIV expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 9 (expr -> expr DIV expr .)
    COMMA           reduce using rule 9 (expr -> expr DIV expr .)
    R_BRACK         reduce using rule 9 (expr -> expr DIV expr .)
    R_PAREN         reduce using rule 9 (expr -> expr DIV expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! MULT            [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! DIV             [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! MOD             [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! PLUS            [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! MINUS           [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! AND_ALSO        [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! OR_ELSE         [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! LTE             [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! GTE             [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! EQ_EQ           [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! NEQ             [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! LT              [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! GT              [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! IN              [ reduce using rule 9 (expr -> expr DIV expr .) ]
  ! CONS            [ reduce using rule 9 (expr -> expr DIV expr .) ]


state 43

    (10) expr -> expr MOD expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 10 (expr -> expr MOD expr .)
    COMMA           reduce using rule 10 (expr -> expr MOD expr .)
    R_BRACK         reduce using rule 10 (expr -> expr MOD expr .)
    R_PAREN         reduce using rule 10 (expr -> expr MOD expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! MULT            [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! DIV             [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! MOD             [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! PLUS            [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! MINUS           [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! AND_ALSO        [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! OR_ELSE         [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! LTE             [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! GTE             [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! EQ_EQ           [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! NEQ             [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! LT              [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! GT              [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! IN              [ reduce using rule 10 (expr -> expr MOD expr .) ]
  ! CONS            [ reduce using rule 10 (expr -> expr MOD expr .) ]


state 44

    (11) expr -> expr PLUS expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 11 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 11 (expr -> expr PLUS expr .)
    R_BRACK         reduce using rule 11 (expr -> expr PLUS expr .)
    R_PAREN         reduce using rule 11 (expr -> expr PLUS expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! MULT            [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! PLUS            [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! AND_ALSO        [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! OR_ELSE         [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! LTE             [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! GTE             [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! EQ_EQ           [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! NEQ             [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! LT              [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! GT              [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! IN              [ reduce using rule 11 (expr -> expr PLUS expr .) ]
  ! CONS            [ reduce using rule 11 (expr -> expr PLUS expr .) ]


state 45

    (12) expr -> expr MINUS expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 12 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 12 (expr -> expr MINUS expr .)
    R_BRACK         reduce using rule 12 (expr -> expr MINUS expr .)
    R_PAREN         reduce using rule 12 (expr -> expr MINUS expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! MULT            [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! PLUS            [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! AND_ALSO        [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! OR_ELSE         [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! LTE             [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! GTE             [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! EQ_EQ           [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! NEQ             [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! LT              [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! GT              [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! IN              [ reduce using rule 12 (expr -> expr MINUS expr .) ]
  ! CONS            [ reduce using rule 12 (expr -> expr MINUS expr .) ]


state 46

    (14) expr -> expr AND_ALSO expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 14 (expr -> expr AND_ALSO expr .)
    COMMA           reduce using rule 14 (expr -> expr AND_ALSO expr .)
    R_BRACK         reduce using rule 14 (expr -> expr AND_ALSO expr .)
    R_PAREN         reduce using rule 14 (expr -> expr AND_ALSO expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! MULT            [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! DIV             [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! MOD             [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! PLUS            [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! MINUS           [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! AND_ALSO        [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! OR_ELSE         [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! LTE             [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! GTE             [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! EQ_EQ           [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! NEQ             [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! LT              [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! GT              [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! IN              [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]
  ! CONS            [ reduce using rule 14 (expr -> expr AND_ALSO expr .) ]


state 47

    (15) expr -> expr OR_ELSE expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 15 (expr -> expr OR_ELSE expr .)
    COMMA           reduce using rule 15 (expr -> expr OR_ELSE expr .)
    R_BRACK         reduce using rule 15 (expr -> expr OR_ELSE expr .)
    R_PAREN         reduce using rule 15 (expr -> expr OR_ELSE expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! MULT            [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! DIV             [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! MOD             [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! PLUS            [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! MINUS           [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! AND_ALSO        [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! OR_ELSE         [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! LTE             [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! GTE             [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! EQ_EQ           [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! NEQ             [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! LT              [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! GT              [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! IN              [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]
  ! CONS            [ reduce using rule 15 (expr -> expr OR_ELSE expr .) ]


state 48

    (16) expr -> expr LTE expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 16 (expr -> expr LTE expr .)
    COMMA           reduce using rule 16 (expr -> expr LTE expr .)
    R_BRACK         reduce using rule 16 (expr -> expr LTE expr .)
    R_PAREN         reduce using rule 16 (expr -> expr LTE expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! MULT            [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! DIV             [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! MOD             [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! PLUS            [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! MINUS           [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! AND_ALSO        [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! OR_ELSE         [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! LTE             [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! GTE             [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! EQ_EQ           [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! NEQ             [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! LT              [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! GT              [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! IN              [ reduce using rule 16 (expr -> expr LTE expr .) ]
  ! CONS            [ reduce using rule 16 (expr -> expr LTE expr .) ]


state 49

    (17) expr -> expr GTE expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 17 (expr -> expr GTE expr .)
    COMMA           reduce using rule 17 (expr -> expr GTE expr .)
    R_BRACK         reduce using rule 17 (expr -> expr GTE expr .)
    R_PAREN         reduce using rule 17 (expr -> expr GTE expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! MULT            [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! DIV             [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! MOD             [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! PLUS            [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! MINUS           [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! AND_ALSO        [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! OR_ELSE         [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! LTE             [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! GTE             [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! EQ_EQ           [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! NEQ             [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! LT              [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! GT              [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! IN              [ reduce using rule 17 (expr -> expr GTE expr .) ]
  ! CONS            [ reduce using rule 17 (expr -> expr GTE expr .) ]


state 50

    (18) expr -> expr EQ_EQ expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 18 (expr -> expr EQ_EQ expr .)
    COMMA           reduce using rule 18 (expr -> expr EQ_EQ expr .)
    R_BRACK         reduce using rule 18 (expr -> expr EQ_EQ expr .)
    R_PAREN         reduce using rule 18 (expr -> expr EQ_EQ expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! MULT            [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! DIV             [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! MOD             [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! PLUS            [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! AND_ALSO        [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! OR_ELSE         [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! LTE             [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! GTE             [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! EQ_EQ           [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! NEQ             [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! LT              [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! GT              [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! IN              [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]
  ! CONS            [ reduce using rule 18 (expr -> expr EQ_EQ expr .) ]


state 51

    (19) expr -> expr NEQ expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 19 (expr -> expr NEQ expr .)
    COMMA           reduce using rule 19 (expr -> expr NEQ expr .)
    R_BRACK         reduce using rule 19 (expr -> expr NEQ expr .)
    R_PAREN         reduce using rule 19 (expr -> expr NEQ expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! MULT            [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! DIV             [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! MOD             [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! PLUS            [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! MINUS           [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! AND_ALSO        [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! OR_ELSE         [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! LTE             [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! GTE             [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! EQ_EQ           [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! NEQ             [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! LT              [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! GT              [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! IN              [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! CONS            [ reduce using rule 19 (expr -> expr NEQ expr .) ]


state 52

    (20) expr -> expr LT expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 20 (expr -> expr LT expr .)
    COMMA           reduce using rule 20 (expr -> expr LT expr .)
    R_BRACK         reduce using rule 20 (expr -> expr LT expr .)
    R_PAREN         reduce using rule 20 (expr -> expr LT expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! MULT            [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! AND_ALSO        [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! OR_ELSE         [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! LTE             [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! GTE             [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! EQ_EQ           [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! NEQ             [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! LT              [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! GT              [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! IN              [ reduce using rule 20 (expr -> expr LT expr .) ]
  ! CONS            [ reduce using rule 20 (expr -> expr LT expr .) ]


state 53

    (21) expr -> expr GT expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 21 (expr -> expr GT expr .)
    COMMA           reduce using rule 21 (expr -> expr GT expr .)
    R_BRACK         reduce using rule 21 (expr -> expr GT expr .)
    R_PAREN         reduce using rule 21 (expr -> expr GT expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! MULT            [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! AND_ALSO        [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! OR_ELSE         [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! LTE             [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! GTE             [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! EQ_EQ           [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! NEQ             [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! LT              [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! GT              [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! IN              [ reduce using rule 21 (expr -> expr GT expr .) ]
  ! CONS            [ reduce using rule 21 (expr -> expr GT expr .) ]


state 54

    (22) expr -> expr IN expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 22 (expr -> expr IN expr .)
    COMMA           reduce using rule 22 (expr -> expr IN expr .)
    R_BRACK         reduce using rule 22 (expr -> expr IN expr .)
    R_PAREN         reduce using rule 22 (expr -> expr IN expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! MULT            [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! DIV             [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! MOD             [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! PLUS            [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! AND_ALSO        [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! OR_ELSE         [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! LTE             [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! GTE             [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! EQ_EQ           [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! NEQ             [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! LT              [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! GT              [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! IN              [ reduce using rule 22 (expr -> expr IN expr .) ]
  ! CONS            [ reduce using rule 22 (expr -> expr IN expr .) ]


state 55

    (23) expr -> expr CONS expr .
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND_ALSO resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for CONS resolved as shift
    SEMICOLON       reduce using rule 23 (expr -> expr CONS expr .)
    COMMA           reduce using rule 23 (expr -> expr CONS expr .)
    R_BRACK         reduce using rule 23 (expr -> expr CONS expr .)
    R_PAREN         reduce using rule 23 (expr -> expr CONS expr .)
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29

  ! POW             [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! MULT            [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! DIV             [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! MOD             [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! PLUS            [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! AND_ALSO        [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! OR_ELSE         [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! LTE             [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! GTE             [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! EQ_EQ           [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! NEQ             [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! LT              [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! GT              [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! IN              [ reduce using rule 23 (expr -> expr CONS expr .) ]
  ! CONS            [ reduce using rule 23 (expr -> expr CONS expr .) ]


state 56

    (29) expr -> list L_BRACK expr . R_BRACK
    (7) expr -> expr . POW expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr
    (11) expr -> expr . PLUS expr
    (12) expr -> expr . MINUS expr
    (14) expr -> expr . AND_ALSO expr
    (15) expr -> expr . OR_ELSE expr
    (16) expr -> expr . LTE expr
    (17) expr -> expr . GTE expr
    (18) expr -> expr . EQ_EQ expr
    (19) expr -> expr . NEQ expr
    (20) expr -> expr . LT expr
    (21) expr -> expr . GT expr
    (22) expr -> expr . IN expr
    (23) expr -> expr . CONS expr

    R_BRACK         shift and go to state 63
    POW             shift and go to state 14
    MULT            shift and go to state 15
    DIV             shift and go to state 16
    MOD             shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    AND_ALSO        shift and go to state 20
    OR_ELSE         shift and go to state 21
    LTE             shift and go to state 22
    GTE             shift and go to state 23
    EQ_EQ           shift and go to state 24
    NEQ             shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    IN              shift and go to state 28
    CONS            shift and go to state 29


state 57

    (27) list -> L_BRACK sequence R_BRACK .

    L_BRACK         reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    SEMICOLON       reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    POW             reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    MULT            reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    DIV             reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    MOD             reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    PLUS            reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    MINUS           reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    AND_ALSO        reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    OR_ELSE         reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    LTE             reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    GTE             reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    EQ_EQ           reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    NEQ             reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    LT              reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    GT              reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    IN              reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    CONS            reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    COMMA           reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    R_BRACK         reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)
    R_PAREN         reduce using rule 27 (list -> L_BRACK sequence R_BRACK .)


state 58

    (25) sequence -> expr COMMA . sequence
    (25) sequence -> . expr COMMA sequence
    (26) sequence -> . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    expr                           shift and go to state 35
    sequence                       shift and go to state 64
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 59

    (30) expr -> L_PAREN expr R_PAREN .

    SEMICOLON       reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    POW             reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    MULT            reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    DIV             reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    MOD             reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    PLUS            reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    MINUS           reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    AND_ALSO        reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    OR_ELSE         reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    LTE             reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    GTE             reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    EQ_EQ           reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    NEQ             reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    LT              reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    GT              reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    IN              reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    CONS            reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    COMMA           reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    R_BRACK         reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)
    R_PAREN         reduce using rule 30 (expr -> L_PAREN expr R_PAREN .)


state 60

    (31) tuple -> L_PAREN sequence R_PAREN .

    SEMICOLON       reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    POW             reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    MULT            reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    DIV             reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    MOD             reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    PLUS            reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    MINUS           reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    AND_ALSO        reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    OR_ELSE         reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    LTE             reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    GTE             reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    EQ_EQ           reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    NEQ             reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    LT              reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    GT              reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    IN              reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    CONS            reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    COMMA           reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    R_BRACK         reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)
    R_PAREN         reduce using rule 31 (tuple -> L_PAREN sequence R_PAREN .)


state 61

    (33) expr -> HASHTAG INTEGER tuple .

    SEMICOLON       reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    POW             reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    MULT            reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    DIV             reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    MOD             reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    PLUS            reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    MINUS           reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    AND_ALSO        reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    OR_ELSE         reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    LTE             reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    GTE             reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    EQ_EQ           reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    NEQ             reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    LT              reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    GT              reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    IN              reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    CONS            reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    COMMA           reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    R_BRACK         reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)
    R_PAREN         reduce using rule 33 (expr -> HASHTAG INTEGER tuple .)


state 62

    (31) tuple -> L_PAREN . sequence R_PAREN
    (32) tuple -> L_PAREN . R_PAREN
    (25) sequence -> . expr COMMA sequence
    (26) sequence -> . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . list
    (6) expr -> . tuple
    (7) expr -> . expr POW expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . expr PLUS expr
    (12) expr -> . expr MINUS expr
    (13) expr -> . MINUS expr
    (14) expr -> . expr AND_ALSO expr
    (15) expr -> . expr OR_ELSE expr
    (16) expr -> . expr LTE expr
    (17) expr -> . expr GTE expr
    (18) expr -> . expr EQ_EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . expr LT expr
    (21) expr -> . expr GT expr
    (22) expr -> . expr IN expr
    (23) expr -> . expr CONS expr
    (24) expr -> . NOT expr
    (29) expr -> . list L_BRACK expr R_BRACK
    (30) expr -> . L_PAREN expr R_PAREN
    (33) expr -> . HASHTAG INTEGER tuple
    (27) list -> . L_BRACK sequence R_BRACK
    (28) list -> . L_BRACK R_BRACK
    (31) tuple -> . L_PAREN sequence R_PAREN
    (32) tuple -> . L_PAREN R_PAREN

    R_PAREN         shift and go to state 37
    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    MINUS           shift and go to state 8
    NOT             shift and go to state 9
    L_PAREN         shift and go to state 11
    HASHTAG         shift and go to state 12
    L_BRACK         shift and go to state 10

    sequence                       shift and go to state 38
    expr                           shift and go to state 35
    list                           shift and go to state 6
    tuple                          shift and go to state 7

state 63

    (29) expr -> list L_BRACK expr R_BRACK .

    SEMICOLON       reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    POW             reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    MULT            reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    DIV             reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    MOD             reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    PLUS            reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    MINUS           reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    AND_ALSO        reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    OR_ELSE         reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    LTE             reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    GTE             reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    EQ_EQ           reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    NEQ             reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    LT              reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    GT              reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    IN              reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    CONS            reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    COMMA           reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    R_BRACK         reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)
    R_PAREN         reduce using rule 29 (expr -> list L_BRACK expr R_BRACK .)


state 64

    (25) sequence -> expr COMMA sequence .

    R_BRACK         reduce using rule 25 (sequence -> expr COMMA sequence .)
    R_PAREN         reduce using rule 25 (sequence -> expr COMMA sequence .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for POW in state 32 resolved as shift
WARNING: shift/reduce conflict for MULT in state 32 resolved as shift
WARNING: shift/reduce conflict for DIV in state 32 resolved as shift
WARNING: shift/reduce conflict for MOD in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 32 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 32 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 32 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 32 resolved as shift
WARNING: shift/reduce conflict for LTE in state 32 resolved as shift
WARNING: shift/reduce conflict for GTE in state 32 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 32 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 32 resolved as shift
WARNING: shift/reduce conflict for LT in state 32 resolved as shift
WARNING: shift/reduce conflict for GT in state 32 resolved as shift
WARNING: shift/reduce conflict for IN in state 32 resolved as shift
WARNING: shift/reduce conflict for CONS in state 32 resolved as shift
WARNING: shift/reduce conflict for R_PAREN in state 36 resolved as shift
WARNING: shift/reduce conflict for POW in state 40 resolved as shift
WARNING: shift/reduce conflict for MULT in state 40 resolved as shift
WARNING: shift/reduce conflict for DIV in state 40 resolved as shift
WARNING: shift/reduce conflict for MOD in state 40 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 40 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 40 resolved as shift
WARNING: shift/reduce conflict for LTE in state 40 resolved as shift
WARNING: shift/reduce conflict for GTE in state 40 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 40 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 40 resolved as shift
WARNING: shift/reduce conflict for LT in state 40 resolved as shift
WARNING: shift/reduce conflict for GT in state 40 resolved as shift
WARNING: shift/reduce conflict for IN in state 40 resolved as shift
WARNING: shift/reduce conflict for CONS in state 40 resolved as shift
WARNING: shift/reduce conflict for POW in state 41 resolved as shift
WARNING: shift/reduce conflict for MULT in state 41 resolved as shift
WARNING: shift/reduce conflict for DIV in state 41 resolved as shift
WARNING: shift/reduce conflict for MOD in state 41 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 41 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 41 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 41 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 41 resolved as shift
WARNING: shift/reduce conflict for LTE in state 41 resolved as shift
WARNING: shift/reduce conflict for GTE in state 41 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 41 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 41 resolved as shift
WARNING: shift/reduce conflict for LT in state 41 resolved as shift
WARNING: shift/reduce conflict for GT in state 41 resolved as shift
WARNING: shift/reduce conflict for IN in state 41 resolved as shift
WARNING: shift/reduce conflict for CONS in state 41 resolved as shift
WARNING: shift/reduce conflict for POW in state 42 resolved as shift
WARNING: shift/reduce conflict for MULT in state 42 resolved as shift
WARNING: shift/reduce conflict for DIV in state 42 resolved as shift
WARNING: shift/reduce conflict for MOD in state 42 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 42 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 42 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 42 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 42 resolved as shift
WARNING: shift/reduce conflict for LTE in state 42 resolved as shift
WARNING: shift/reduce conflict for GTE in state 42 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 42 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 42 resolved as shift
WARNING: shift/reduce conflict for LT in state 42 resolved as shift
WARNING: shift/reduce conflict for GT in state 42 resolved as shift
WARNING: shift/reduce conflict for IN in state 42 resolved as shift
WARNING: shift/reduce conflict for CONS in state 42 resolved as shift
WARNING: shift/reduce conflict for POW in state 43 resolved as shift
WARNING: shift/reduce conflict for MULT in state 43 resolved as shift
WARNING: shift/reduce conflict for DIV in state 43 resolved as shift
WARNING: shift/reduce conflict for MOD in state 43 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 43 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 43 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 43 resolved as shift
WARNING: shift/reduce conflict for LTE in state 43 resolved as shift
WARNING: shift/reduce conflict for GTE in state 43 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 43 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 43 resolved as shift
WARNING: shift/reduce conflict for LT in state 43 resolved as shift
WARNING: shift/reduce conflict for GT in state 43 resolved as shift
WARNING: shift/reduce conflict for IN in state 43 resolved as shift
WARNING: shift/reduce conflict for CONS in state 43 resolved as shift
WARNING: shift/reduce conflict for POW in state 44 resolved as shift
WARNING: shift/reduce conflict for MULT in state 44 resolved as shift
WARNING: shift/reduce conflict for DIV in state 44 resolved as shift
WARNING: shift/reduce conflict for MOD in state 44 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 44 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 44 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 44 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 44 resolved as shift
WARNING: shift/reduce conflict for LTE in state 44 resolved as shift
WARNING: shift/reduce conflict for GTE in state 44 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 44 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 44 resolved as shift
WARNING: shift/reduce conflict for LT in state 44 resolved as shift
WARNING: shift/reduce conflict for GT in state 44 resolved as shift
WARNING: shift/reduce conflict for IN in state 44 resolved as shift
WARNING: shift/reduce conflict for CONS in state 44 resolved as shift
WARNING: shift/reduce conflict for POW in state 45 resolved as shift
WARNING: shift/reduce conflict for MULT in state 45 resolved as shift
WARNING: shift/reduce conflict for DIV in state 45 resolved as shift
WARNING: shift/reduce conflict for MOD in state 45 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 45 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 45 resolved as shift
WARNING: shift/reduce conflict for LTE in state 45 resolved as shift
WARNING: shift/reduce conflict for GTE in state 45 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 45 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 45 resolved as shift
WARNING: shift/reduce conflict for LT in state 45 resolved as shift
WARNING: shift/reduce conflict for GT in state 45 resolved as shift
WARNING: shift/reduce conflict for IN in state 45 resolved as shift
WARNING: shift/reduce conflict for CONS in state 45 resolved as shift
WARNING: shift/reduce conflict for POW in state 46 resolved as shift
WARNING: shift/reduce conflict for MULT in state 46 resolved as shift
WARNING: shift/reduce conflict for DIV in state 46 resolved as shift
WARNING: shift/reduce conflict for MOD in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 46 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 46 resolved as shift
WARNING: shift/reduce conflict for LTE in state 46 resolved as shift
WARNING: shift/reduce conflict for GTE in state 46 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 46 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 46 resolved as shift
WARNING: shift/reduce conflict for LT in state 46 resolved as shift
WARNING: shift/reduce conflict for GT in state 46 resolved as shift
WARNING: shift/reduce conflict for IN in state 46 resolved as shift
WARNING: shift/reduce conflict for CONS in state 46 resolved as shift
WARNING: shift/reduce conflict for POW in state 47 resolved as shift
WARNING: shift/reduce conflict for MULT in state 47 resolved as shift
WARNING: shift/reduce conflict for DIV in state 47 resolved as shift
WARNING: shift/reduce conflict for MOD in state 47 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 47 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 47 resolved as shift
WARNING: shift/reduce conflict for LTE in state 47 resolved as shift
WARNING: shift/reduce conflict for GTE in state 47 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 47 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 47 resolved as shift
WARNING: shift/reduce conflict for LT in state 47 resolved as shift
WARNING: shift/reduce conflict for GT in state 47 resolved as shift
WARNING: shift/reduce conflict for IN in state 47 resolved as shift
WARNING: shift/reduce conflict for CONS in state 47 resolved as shift
WARNING: shift/reduce conflict for POW in state 48 resolved as shift
WARNING: shift/reduce conflict for MULT in state 48 resolved as shift
WARNING: shift/reduce conflict for DIV in state 48 resolved as shift
WARNING: shift/reduce conflict for MOD in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 48 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 48 resolved as shift
WARNING: shift/reduce conflict for LTE in state 48 resolved as shift
WARNING: shift/reduce conflict for GTE in state 48 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 48 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 48 resolved as shift
WARNING: shift/reduce conflict for LT in state 48 resolved as shift
WARNING: shift/reduce conflict for GT in state 48 resolved as shift
WARNING: shift/reduce conflict for IN in state 48 resolved as shift
WARNING: shift/reduce conflict for CONS in state 48 resolved as shift
WARNING: shift/reduce conflict for POW in state 49 resolved as shift
WARNING: shift/reduce conflict for MULT in state 49 resolved as shift
WARNING: shift/reduce conflict for DIV in state 49 resolved as shift
WARNING: shift/reduce conflict for MOD in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 49 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 49 resolved as shift
WARNING: shift/reduce conflict for LTE in state 49 resolved as shift
WARNING: shift/reduce conflict for GTE in state 49 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 49 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 49 resolved as shift
WARNING: shift/reduce conflict for LT in state 49 resolved as shift
WARNING: shift/reduce conflict for GT in state 49 resolved as shift
WARNING: shift/reduce conflict for IN in state 49 resolved as shift
WARNING: shift/reduce conflict for CONS in state 49 resolved as shift
WARNING: shift/reduce conflict for POW in state 50 resolved as shift
WARNING: shift/reduce conflict for MULT in state 50 resolved as shift
WARNING: shift/reduce conflict for DIV in state 50 resolved as shift
WARNING: shift/reduce conflict for MOD in state 50 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 50 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 50 resolved as shift
WARNING: shift/reduce conflict for LTE in state 50 resolved as shift
WARNING: shift/reduce conflict for GTE in state 50 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 50 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 50 resolved as shift
WARNING: shift/reduce conflict for LT in state 50 resolved as shift
WARNING: shift/reduce conflict for GT in state 50 resolved as shift
WARNING: shift/reduce conflict for IN in state 50 resolved as shift
WARNING: shift/reduce conflict for CONS in state 50 resolved as shift
WARNING: shift/reduce conflict for POW in state 51 resolved as shift
WARNING: shift/reduce conflict for MULT in state 51 resolved as shift
WARNING: shift/reduce conflict for DIV in state 51 resolved as shift
WARNING: shift/reduce conflict for MOD in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 51 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 51 resolved as shift
WARNING: shift/reduce conflict for LTE in state 51 resolved as shift
WARNING: shift/reduce conflict for GTE in state 51 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 51 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 51 resolved as shift
WARNING: shift/reduce conflict for LT in state 51 resolved as shift
WARNING: shift/reduce conflict for GT in state 51 resolved as shift
WARNING: shift/reduce conflict for IN in state 51 resolved as shift
WARNING: shift/reduce conflict for CONS in state 51 resolved as shift
WARNING: shift/reduce conflict for POW in state 52 resolved as shift
WARNING: shift/reduce conflict for MULT in state 52 resolved as shift
WARNING: shift/reduce conflict for DIV in state 52 resolved as shift
WARNING: shift/reduce conflict for MOD in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 52 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 52 resolved as shift
WARNING: shift/reduce conflict for LTE in state 52 resolved as shift
WARNING: shift/reduce conflict for GTE in state 52 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 52 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 52 resolved as shift
WARNING: shift/reduce conflict for LT in state 52 resolved as shift
WARNING: shift/reduce conflict for GT in state 52 resolved as shift
WARNING: shift/reduce conflict for IN in state 52 resolved as shift
WARNING: shift/reduce conflict for CONS in state 52 resolved as shift
WARNING: shift/reduce conflict for POW in state 53 resolved as shift
WARNING: shift/reduce conflict for MULT in state 53 resolved as shift
WARNING: shift/reduce conflict for DIV in state 53 resolved as shift
WARNING: shift/reduce conflict for MOD in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 53 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 53 resolved as shift
WARNING: shift/reduce conflict for LTE in state 53 resolved as shift
WARNING: shift/reduce conflict for GTE in state 53 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 53 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 53 resolved as shift
WARNING: shift/reduce conflict for LT in state 53 resolved as shift
WARNING: shift/reduce conflict for GT in state 53 resolved as shift
WARNING: shift/reduce conflict for IN in state 53 resolved as shift
WARNING: shift/reduce conflict for CONS in state 53 resolved as shift
WARNING: shift/reduce conflict for POW in state 54 resolved as shift
WARNING: shift/reduce conflict for MULT in state 54 resolved as shift
WARNING: shift/reduce conflict for DIV in state 54 resolved as shift
WARNING: shift/reduce conflict for MOD in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 54 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 54 resolved as shift
WARNING: shift/reduce conflict for LTE in state 54 resolved as shift
WARNING: shift/reduce conflict for GTE in state 54 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 54 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 54 resolved as shift
WARNING: shift/reduce conflict for LT in state 54 resolved as shift
WARNING: shift/reduce conflict for GT in state 54 resolved as shift
WARNING: shift/reduce conflict for IN in state 54 resolved as shift
WARNING: shift/reduce conflict for CONS in state 54 resolved as shift
WARNING: shift/reduce conflict for POW in state 55 resolved as shift
WARNING: shift/reduce conflict for MULT in state 55 resolved as shift
WARNING: shift/reduce conflict for DIV in state 55 resolved as shift
WARNING: shift/reduce conflict for MOD in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for AND_ALSO in state 55 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 55 resolved as shift
WARNING: shift/reduce conflict for LTE in state 55 resolved as shift
WARNING: shift/reduce conflict for GTE in state 55 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 55 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 55 resolved as shift
WARNING: shift/reduce conflict for LT in state 55 resolved as shift
WARNING: shift/reduce conflict for GT in state 55 resolved as shift
WARNING: shift/reduce conflict for IN in state 55 resolved as shift
WARNING: shift/reduce conflict for CONS in state 55 resolved as shift
