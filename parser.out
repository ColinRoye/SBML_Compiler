Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    EQ

Grammar

Rule 0     S' -> line
Rule 1     line -> expr SEMICOLON
Rule 2     expr -> INTEGER
Rule 3     expr -> FLOAT
Rule 4     expr -> STRING
Rule 5     expr -> BOOLEAN
Rule 6     expr -> list
Rule 7     expr -> tuple
Rule 8     expr -> HASHTAG INTEGER expr
Rule 9     tuple -> L_PAREN sequence R_PAREN
Rule 10    tuple -> L_PAREN R_PAREN
Rule 11    expr -> expr POW expr
Rule 12    expr -> expr MULT expr
Rule 13    expr -> expr DIVINT expr
Rule 14    expr -> expr DIV expr
Rule 15    expr -> expr MOD expr
Rule 16    expr -> expr PLUS expr
Rule 17    expr -> expr MINUS expr
Rule 18    expr -> MINUS expr
Rule 19    expr -> expr AND_ALSO expr
Rule 20    expr -> expr OR_ELSE expr
Rule 21    expr -> expr LTE expr
Rule 22    expr -> expr GTE expr
Rule 23    expr -> expr EQ_EQ expr
Rule 24    expr -> expr NEQ expr
Rule 25    expr -> expr LT expr
Rule 26    expr -> expr GT expr
Rule 27    expr -> expr IN expr
Rule 28    expr -> expr CONS expr
Rule 29    expr -> NOT expr
Rule 30    expr -> expr L_BRACK expr R_BRACK
Rule 31    list -> L_BRACK sequence R_BRACK
Rule 32    list -> L_BRACK R_BRACK
Rule 33    sequence -> expr COMMA sequence
Rule 34    sequence -> expr
Rule 35    expr -> L_PAREN expr R_PAREN

Terminals, with rules where they appear

AND_ALSO             : 19
BOOLEAN              : 5
COLON                : 
COMMA                : 33
CONS                 : 28
DIV                  : 14
DIVINT               : 13
EQ                   : 
EQ_EQ                : 23
FLOAT                : 3
GT                   : 26
GTE                  : 22
HASHTAG              : 8
IN                   : 27
INTEGER              : 2 8
LT                   : 25
LTE                  : 21
L_BRACK              : 30 31 32
L_PAREN              : 9 10 35
MINUS                : 17 18
MOD                  : 15
MULT                 : 12
NEQ                  : 24
NOT                  : 29
OR_ELSE              : 20
PLUS                 : 16
POW                  : 11
R_BRACK              : 30 31 32
R_PAREN              : 9 10 35
SEMICOLON            : 1
STRING               : 4
error                : 

Nonterminals, with rules where they appear

expr                 : 1 8 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 30 30 33 34 35
line                 : 0
list                 : 6
sequence             : 9 31 33
tuple                : 7

Parsing method: LALR

state 0

    (0) S' -> . line
    (1) line -> . expr SEMICOLON
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    line                           shift and go to state 1
    expr                           shift and go to state 2
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 1

    (0) S' -> line .



state 2

    (1) line -> expr . SEMICOLON
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       shift and go to state 14
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    AND_ALSO        shift and go to state 22
    OR_ELSE         shift and go to state 23
    LTE             shift and go to state 24
    GTE             shift and go to state 25
    EQ_EQ           shift and go to state 26
    NEQ             shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32


state 3

    (2) expr -> INTEGER .

    SEMICOLON       reduce using rule 2 (expr -> INTEGER .)
    POW             reduce using rule 2 (expr -> INTEGER .)
    MULT            reduce using rule 2 (expr -> INTEGER .)
    DIVINT          reduce using rule 2 (expr -> INTEGER .)
    DIV             reduce using rule 2 (expr -> INTEGER .)
    MOD             reduce using rule 2 (expr -> INTEGER .)
    PLUS            reduce using rule 2 (expr -> INTEGER .)
    MINUS           reduce using rule 2 (expr -> INTEGER .)
    AND_ALSO        reduce using rule 2 (expr -> INTEGER .)
    OR_ELSE         reduce using rule 2 (expr -> INTEGER .)
    LTE             reduce using rule 2 (expr -> INTEGER .)
    GTE             reduce using rule 2 (expr -> INTEGER .)
    EQ_EQ           reduce using rule 2 (expr -> INTEGER .)
    NEQ             reduce using rule 2 (expr -> INTEGER .)
    LT              reduce using rule 2 (expr -> INTEGER .)
    GT              reduce using rule 2 (expr -> INTEGER .)
    IN              reduce using rule 2 (expr -> INTEGER .)
    CONS            reduce using rule 2 (expr -> INTEGER .)
    L_BRACK         reduce using rule 2 (expr -> INTEGER .)
    COMMA           reduce using rule 2 (expr -> INTEGER .)
    R_BRACK         reduce using rule 2 (expr -> INTEGER .)
    R_PAREN         reduce using rule 2 (expr -> INTEGER .)


state 4

    (3) expr -> FLOAT .

    SEMICOLON       reduce using rule 3 (expr -> FLOAT .)
    POW             reduce using rule 3 (expr -> FLOAT .)
    MULT            reduce using rule 3 (expr -> FLOAT .)
    DIVINT          reduce using rule 3 (expr -> FLOAT .)
    DIV             reduce using rule 3 (expr -> FLOAT .)
    MOD             reduce using rule 3 (expr -> FLOAT .)
    PLUS            reduce using rule 3 (expr -> FLOAT .)
    MINUS           reduce using rule 3 (expr -> FLOAT .)
    AND_ALSO        reduce using rule 3 (expr -> FLOAT .)
    OR_ELSE         reduce using rule 3 (expr -> FLOAT .)
    LTE             reduce using rule 3 (expr -> FLOAT .)
    GTE             reduce using rule 3 (expr -> FLOAT .)
    EQ_EQ           reduce using rule 3 (expr -> FLOAT .)
    NEQ             reduce using rule 3 (expr -> FLOAT .)
    LT              reduce using rule 3 (expr -> FLOAT .)
    GT              reduce using rule 3 (expr -> FLOAT .)
    IN              reduce using rule 3 (expr -> FLOAT .)
    CONS            reduce using rule 3 (expr -> FLOAT .)
    L_BRACK         reduce using rule 3 (expr -> FLOAT .)
    COMMA           reduce using rule 3 (expr -> FLOAT .)
    R_BRACK         reduce using rule 3 (expr -> FLOAT .)
    R_PAREN         reduce using rule 3 (expr -> FLOAT .)


state 5

    (4) expr -> STRING .

    SEMICOLON       reduce using rule 4 (expr -> STRING .)
    POW             reduce using rule 4 (expr -> STRING .)
    MULT            reduce using rule 4 (expr -> STRING .)
    DIVINT          reduce using rule 4 (expr -> STRING .)
    DIV             reduce using rule 4 (expr -> STRING .)
    MOD             reduce using rule 4 (expr -> STRING .)
    PLUS            reduce using rule 4 (expr -> STRING .)
    MINUS           reduce using rule 4 (expr -> STRING .)
    AND_ALSO        reduce using rule 4 (expr -> STRING .)
    OR_ELSE         reduce using rule 4 (expr -> STRING .)
    LTE             reduce using rule 4 (expr -> STRING .)
    GTE             reduce using rule 4 (expr -> STRING .)
    EQ_EQ           reduce using rule 4 (expr -> STRING .)
    NEQ             reduce using rule 4 (expr -> STRING .)
    LT              reduce using rule 4 (expr -> STRING .)
    GT              reduce using rule 4 (expr -> STRING .)
    IN              reduce using rule 4 (expr -> STRING .)
    CONS            reduce using rule 4 (expr -> STRING .)
    L_BRACK         reduce using rule 4 (expr -> STRING .)
    COMMA           reduce using rule 4 (expr -> STRING .)
    R_BRACK         reduce using rule 4 (expr -> STRING .)
    R_PAREN         reduce using rule 4 (expr -> STRING .)


state 6

    (5) expr -> BOOLEAN .

    SEMICOLON       reduce using rule 5 (expr -> BOOLEAN .)
    POW             reduce using rule 5 (expr -> BOOLEAN .)
    MULT            reduce using rule 5 (expr -> BOOLEAN .)
    DIVINT          reduce using rule 5 (expr -> BOOLEAN .)
    DIV             reduce using rule 5 (expr -> BOOLEAN .)
    MOD             reduce using rule 5 (expr -> BOOLEAN .)
    PLUS            reduce using rule 5 (expr -> BOOLEAN .)
    MINUS           reduce using rule 5 (expr -> BOOLEAN .)
    AND_ALSO        reduce using rule 5 (expr -> BOOLEAN .)
    OR_ELSE         reduce using rule 5 (expr -> BOOLEAN .)
    LTE             reduce using rule 5 (expr -> BOOLEAN .)
    GTE             reduce using rule 5 (expr -> BOOLEAN .)
    EQ_EQ           reduce using rule 5 (expr -> BOOLEAN .)
    NEQ             reduce using rule 5 (expr -> BOOLEAN .)
    LT              reduce using rule 5 (expr -> BOOLEAN .)
    GT              reduce using rule 5 (expr -> BOOLEAN .)
    IN              reduce using rule 5 (expr -> BOOLEAN .)
    CONS            reduce using rule 5 (expr -> BOOLEAN .)
    L_BRACK         reduce using rule 5 (expr -> BOOLEAN .)
    COMMA           reduce using rule 5 (expr -> BOOLEAN .)
    R_BRACK         reduce using rule 5 (expr -> BOOLEAN .)
    R_PAREN         reduce using rule 5 (expr -> BOOLEAN .)


state 7

    (6) expr -> list .

    SEMICOLON       reduce using rule 6 (expr -> list .)
    POW             reduce using rule 6 (expr -> list .)
    MULT            reduce using rule 6 (expr -> list .)
    DIVINT          reduce using rule 6 (expr -> list .)
    DIV             reduce using rule 6 (expr -> list .)
    MOD             reduce using rule 6 (expr -> list .)
    PLUS            reduce using rule 6 (expr -> list .)
    MINUS           reduce using rule 6 (expr -> list .)
    AND_ALSO        reduce using rule 6 (expr -> list .)
    OR_ELSE         reduce using rule 6 (expr -> list .)
    LTE             reduce using rule 6 (expr -> list .)
    GTE             reduce using rule 6 (expr -> list .)
    EQ_EQ           reduce using rule 6 (expr -> list .)
    NEQ             reduce using rule 6 (expr -> list .)
    LT              reduce using rule 6 (expr -> list .)
    GT              reduce using rule 6 (expr -> list .)
    IN              reduce using rule 6 (expr -> list .)
    CONS            reduce using rule 6 (expr -> list .)
    L_BRACK         reduce using rule 6 (expr -> list .)
    COMMA           reduce using rule 6 (expr -> list .)
    R_BRACK         reduce using rule 6 (expr -> list .)
    R_PAREN         reduce using rule 6 (expr -> list .)


state 8

    (7) expr -> tuple .

    SEMICOLON       reduce using rule 7 (expr -> tuple .)
    POW             reduce using rule 7 (expr -> tuple .)
    MULT            reduce using rule 7 (expr -> tuple .)
    DIVINT          reduce using rule 7 (expr -> tuple .)
    DIV             reduce using rule 7 (expr -> tuple .)
    MOD             reduce using rule 7 (expr -> tuple .)
    PLUS            reduce using rule 7 (expr -> tuple .)
    MINUS           reduce using rule 7 (expr -> tuple .)
    AND_ALSO        reduce using rule 7 (expr -> tuple .)
    OR_ELSE         reduce using rule 7 (expr -> tuple .)
    LTE             reduce using rule 7 (expr -> tuple .)
    GTE             reduce using rule 7 (expr -> tuple .)
    EQ_EQ           reduce using rule 7 (expr -> tuple .)
    NEQ             reduce using rule 7 (expr -> tuple .)
    LT              reduce using rule 7 (expr -> tuple .)
    GT              reduce using rule 7 (expr -> tuple .)
    IN              reduce using rule 7 (expr -> tuple .)
    CONS            reduce using rule 7 (expr -> tuple .)
    L_BRACK         reduce using rule 7 (expr -> tuple .)
    COMMA           reduce using rule 7 (expr -> tuple .)
    R_BRACK         reduce using rule 7 (expr -> tuple .)
    R_PAREN         reduce using rule 7 (expr -> tuple .)


state 9

    (8) expr -> HASHTAG . INTEGER expr

    INTEGER         shift and go to state 33


state 10

    (18) expr -> MINUS . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 34
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 11

    (29) expr -> NOT . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 35
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 12

    (31) list -> L_BRACK . sequence R_BRACK
    (32) list -> L_BRACK . R_BRACK
    (33) sequence -> . expr COMMA sequence
    (34) sequence -> . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    R_BRACK         shift and go to state 37
    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    sequence                       shift and go to state 36
    expr                           shift and go to state 38
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 13

    (35) expr -> L_PAREN . expr R_PAREN
    (9) tuple -> L_PAREN . sequence R_PAREN
    (10) tuple -> L_PAREN . R_PAREN
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (33) sequence -> . expr COMMA sequence
    (34) sequence -> . expr
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    R_PAREN         shift and go to state 40
    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 39
    sequence                       shift and go to state 41
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 14

    (1) line -> expr SEMICOLON .

    $end            reduce using rule 1 (line -> expr SEMICOLON .)


state 15

    (11) expr -> expr POW . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 42
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 16

    (12) expr -> expr MULT . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 43
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 17

    (13) expr -> expr DIVINT . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 44
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 18

    (14) expr -> expr DIV . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 45
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 19

    (15) expr -> expr MOD . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 46
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 20

    (16) expr -> expr PLUS . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 47
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 21

    (17) expr -> expr MINUS . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 48
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 22

    (19) expr -> expr AND_ALSO . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 49
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 23

    (20) expr -> expr OR_ELSE . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 50
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 24

    (21) expr -> expr LTE . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 51
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 25

    (22) expr -> expr GTE . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 52
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 26

    (23) expr -> expr EQ_EQ . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 53
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 27

    (24) expr -> expr NEQ . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 54
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 28

    (25) expr -> expr LT . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 55
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 29

    (26) expr -> expr GT . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 56
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 30

    (27) expr -> expr IN . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 57
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 31

    (28) expr -> expr CONS . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 58
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 32

    (30) expr -> expr L_BRACK . expr R_BRACK
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 59
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 33

    (8) expr -> HASHTAG INTEGER . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 60
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 34

    (18) expr -> MINUS expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 18 (expr -> MINUS expr .)
    MULT            reduce using rule 18 (expr -> MINUS expr .)
    DIVINT          reduce using rule 18 (expr -> MINUS expr .)
    DIV             reduce using rule 18 (expr -> MINUS expr .)
    MOD             reduce using rule 18 (expr -> MINUS expr .)
    PLUS            reduce using rule 18 (expr -> MINUS expr .)
    MINUS           reduce using rule 18 (expr -> MINUS expr .)
    AND_ALSO        reduce using rule 18 (expr -> MINUS expr .)
    OR_ELSE         reduce using rule 18 (expr -> MINUS expr .)
    LTE             reduce using rule 18 (expr -> MINUS expr .)
    GTE             reduce using rule 18 (expr -> MINUS expr .)
    EQ_EQ           reduce using rule 18 (expr -> MINUS expr .)
    NEQ             reduce using rule 18 (expr -> MINUS expr .)
    LT              reduce using rule 18 (expr -> MINUS expr .)
    GT              reduce using rule 18 (expr -> MINUS expr .)
    IN              reduce using rule 18 (expr -> MINUS expr .)
    CONS            reduce using rule 18 (expr -> MINUS expr .)
    COMMA           reduce using rule 18 (expr -> MINUS expr .)
    R_BRACK         reduce using rule 18 (expr -> MINUS expr .)
    R_PAREN         reduce using rule 18 (expr -> MINUS expr .)
    POW             shift and go to state 15
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 18 (expr -> MINUS expr .) ]
  ! L_BRACK         [ reduce using rule 18 (expr -> MINUS expr .) ]
  ! MULT            [ shift and go to state 16 ]
  ! DIVINT          [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]
  ! MOD             [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 20 ]
  ! MINUS           [ shift and go to state 21 ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]
  ! IN              [ shift and go to state 30 ]
  ! CONS            [ shift and go to state 31 ]


state 35

    (29) expr -> NOT expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 29 (expr -> NOT expr .)
    MULT            reduce using rule 29 (expr -> NOT expr .)
    DIVINT          reduce using rule 29 (expr -> NOT expr .)
    DIV             reduce using rule 29 (expr -> NOT expr .)
    MOD             reduce using rule 29 (expr -> NOT expr .)
    PLUS            reduce using rule 29 (expr -> NOT expr .)
    MINUS           reduce using rule 29 (expr -> NOT expr .)
    AND_ALSO        reduce using rule 29 (expr -> NOT expr .)
    OR_ELSE         reduce using rule 29 (expr -> NOT expr .)
    LTE             reduce using rule 29 (expr -> NOT expr .)
    GTE             reduce using rule 29 (expr -> NOT expr .)
    EQ_EQ           reduce using rule 29 (expr -> NOT expr .)
    NEQ             reduce using rule 29 (expr -> NOT expr .)
    LT              reduce using rule 29 (expr -> NOT expr .)
    GT              reduce using rule 29 (expr -> NOT expr .)
    IN              reduce using rule 29 (expr -> NOT expr .)
    CONS            reduce using rule 29 (expr -> NOT expr .)
    COMMA           reduce using rule 29 (expr -> NOT expr .)
    R_BRACK         reduce using rule 29 (expr -> NOT expr .)
    R_PAREN         reduce using rule 29 (expr -> NOT expr .)
    POW             shift and go to state 15
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 29 (expr -> NOT expr .) ]
  ! L_BRACK         [ reduce using rule 29 (expr -> NOT expr .) ]
  ! MULT            [ shift and go to state 16 ]
  ! DIVINT          [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]
  ! MOD             [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 20 ]
  ! MINUS           [ shift and go to state 21 ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]
  ! IN              [ shift and go to state 30 ]
  ! CONS            [ shift and go to state 31 ]


state 36

    (31) list -> L_BRACK sequence . R_BRACK

    R_BRACK         shift and go to state 61


state 37

    (32) list -> L_BRACK R_BRACK .

    SEMICOLON       reduce using rule 32 (list -> L_BRACK R_BRACK .)
    POW             reduce using rule 32 (list -> L_BRACK R_BRACK .)
    MULT            reduce using rule 32 (list -> L_BRACK R_BRACK .)
    DIVINT          reduce using rule 32 (list -> L_BRACK R_BRACK .)
    DIV             reduce using rule 32 (list -> L_BRACK R_BRACK .)
    MOD             reduce using rule 32 (list -> L_BRACK R_BRACK .)
    PLUS            reduce using rule 32 (list -> L_BRACK R_BRACK .)
    MINUS           reduce using rule 32 (list -> L_BRACK R_BRACK .)
    AND_ALSO        reduce using rule 32 (list -> L_BRACK R_BRACK .)
    OR_ELSE         reduce using rule 32 (list -> L_BRACK R_BRACK .)
    LTE             reduce using rule 32 (list -> L_BRACK R_BRACK .)
    GTE             reduce using rule 32 (list -> L_BRACK R_BRACK .)
    EQ_EQ           reduce using rule 32 (list -> L_BRACK R_BRACK .)
    NEQ             reduce using rule 32 (list -> L_BRACK R_BRACK .)
    LT              reduce using rule 32 (list -> L_BRACK R_BRACK .)
    GT              reduce using rule 32 (list -> L_BRACK R_BRACK .)
    IN              reduce using rule 32 (list -> L_BRACK R_BRACK .)
    CONS            reduce using rule 32 (list -> L_BRACK R_BRACK .)
    L_BRACK         reduce using rule 32 (list -> L_BRACK R_BRACK .)
    COMMA           reduce using rule 32 (list -> L_BRACK R_BRACK .)
    R_BRACK         reduce using rule 32 (list -> L_BRACK R_BRACK .)
    R_PAREN         reduce using rule 32 (list -> L_BRACK R_BRACK .)


state 38

    (33) sequence -> expr . COMMA sequence
    (34) sequence -> expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    COMMA           shift and go to state 62
    R_BRACK         reduce using rule 34 (sequence -> expr .)
    R_PAREN         reduce using rule 34 (sequence -> expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    AND_ALSO        shift and go to state 22
    OR_ELSE         shift and go to state 23
    LTE             shift and go to state 24
    GTE             shift and go to state 25
    EQ_EQ           shift and go to state 26
    NEQ             shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32


state 39

    (35) expr -> L_PAREN expr . R_PAREN
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK
    (33) sequence -> expr . COMMA sequence
    (34) sequence -> expr .

  ! shift/reduce conflict for R_PAREN resolved as shift
    R_PAREN         shift and go to state 63
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    AND_ALSO        shift and go to state 22
    OR_ELSE         shift and go to state 23
    LTE             shift and go to state 24
    GTE             shift and go to state 25
    EQ_EQ           shift and go to state 26
    NEQ             shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32
    COMMA           shift and go to state 62

  ! R_PAREN         [ reduce using rule 34 (sequence -> expr .) ]


state 40

    (10) tuple -> L_PAREN R_PAREN .

    SEMICOLON       reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    POW             reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    MULT            reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    DIVINT          reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    DIV             reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    MOD             reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    PLUS            reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    MINUS           reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    AND_ALSO        reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    OR_ELSE         reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    LTE             reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    GTE             reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    EQ_EQ           reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    NEQ             reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    LT              reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    GT              reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    IN              reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    CONS            reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    L_BRACK         reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    COMMA           reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    R_BRACK         reduce using rule 10 (tuple -> L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 10 (tuple -> L_PAREN R_PAREN .)


state 41

    (9) tuple -> L_PAREN sequence . R_PAREN

    R_PAREN         shift and go to state 64


state 42

    (11) expr -> expr POW expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 11 (expr -> expr POW expr .)
    MULT            reduce using rule 11 (expr -> expr POW expr .)
    DIVINT          reduce using rule 11 (expr -> expr POW expr .)
    DIV             reduce using rule 11 (expr -> expr POW expr .)
    MOD             reduce using rule 11 (expr -> expr POW expr .)
    PLUS            reduce using rule 11 (expr -> expr POW expr .)
    MINUS           reduce using rule 11 (expr -> expr POW expr .)
    AND_ALSO        reduce using rule 11 (expr -> expr POW expr .)
    OR_ELSE         reduce using rule 11 (expr -> expr POW expr .)
    LTE             reduce using rule 11 (expr -> expr POW expr .)
    GTE             reduce using rule 11 (expr -> expr POW expr .)
    EQ_EQ           reduce using rule 11 (expr -> expr POW expr .)
    NEQ             reduce using rule 11 (expr -> expr POW expr .)
    LT              reduce using rule 11 (expr -> expr POW expr .)
    GT              reduce using rule 11 (expr -> expr POW expr .)
    IN              reduce using rule 11 (expr -> expr POW expr .)
    CONS            reduce using rule 11 (expr -> expr POW expr .)
    COMMA           reduce using rule 11 (expr -> expr POW expr .)
    R_BRACK         reduce using rule 11 (expr -> expr POW expr .)
    R_PAREN         reduce using rule 11 (expr -> expr POW expr .)
    POW             shift and go to state 15
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 11 (expr -> expr POW expr .) ]
  ! L_BRACK         [ reduce using rule 11 (expr -> expr POW expr .) ]
  ! MULT            [ shift and go to state 16 ]
  ! DIVINT          [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]
  ! MOD             [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 20 ]
  ! MINUS           [ shift and go to state 21 ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]
  ! IN              [ shift and go to state 30 ]
  ! CONS            [ shift and go to state 31 ]


state 43

    (12) expr -> expr MULT expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 12 (expr -> expr MULT expr .)
    MULT            reduce using rule 12 (expr -> expr MULT expr .)
    DIVINT          reduce using rule 12 (expr -> expr MULT expr .)
    DIV             reduce using rule 12 (expr -> expr MULT expr .)
    MOD             reduce using rule 12 (expr -> expr MULT expr .)
    PLUS            reduce using rule 12 (expr -> expr MULT expr .)
    MINUS           reduce using rule 12 (expr -> expr MULT expr .)
    AND_ALSO        reduce using rule 12 (expr -> expr MULT expr .)
    OR_ELSE         reduce using rule 12 (expr -> expr MULT expr .)
    LTE             reduce using rule 12 (expr -> expr MULT expr .)
    GTE             reduce using rule 12 (expr -> expr MULT expr .)
    EQ_EQ           reduce using rule 12 (expr -> expr MULT expr .)
    NEQ             reduce using rule 12 (expr -> expr MULT expr .)
    LT              reduce using rule 12 (expr -> expr MULT expr .)
    GT              reduce using rule 12 (expr -> expr MULT expr .)
    IN              reduce using rule 12 (expr -> expr MULT expr .)
    CONS            reduce using rule 12 (expr -> expr MULT expr .)
    COMMA           reduce using rule 12 (expr -> expr MULT expr .)
    R_BRACK         reduce using rule 12 (expr -> expr MULT expr .)
    R_PAREN         reduce using rule 12 (expr -> expr MULT expr .)
    POW             shift and go to state 15
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 12 (expr -> expr MULT expr .) ]
  ! L_BRACK         [ reduce using rule 12 (expr -> expr MULT expr .) ]
  ! MULT            [ shift and go to state 16 ]
  ! DIVINT          [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]
  ! MOD             [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 20 ]
  ! MINUS           [ shift and go to state 21 ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]
  ! IN              [ shift and go to state 30 ]
  ! CONS            [ shift and go to state 31 ]


state 44

    (13) expr -> expr DIVINT expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 13 (expr -> expr DIVINT expr .)
    MULT            reduce using rule 13 (expr -> expr DIVINT expr .)
    DIVINT          reduce using rule 13 (expr -> expr DIVINT expr .)
    DIV             reduce using rule 13 (expr -> expr DIVINT expr .)
    MOD             reduce using rule 13 (expr -> expr DIVINT expr .)
    PLUS            reduce using rule 13 (expr -> expr DIVINT expr .)
    MINUS           reduce using rule 13 (expr -> expr DIVINT expr .)
    AND_ALSO        reduce using rule 13 (expr -> expr DIVINT expr .)
    OR_ELSE         reduce using rule 13 (expr -> expr DIVINT expr .)
    LTE             reduce using rule 13 (expr -> expr DIVINT expr .)
    GTE             reduce using rule 13 (expr -> expr DIVINT expr .)
    EQ_EQ           reduce using rule 13 (expr -> expr DIVINT expr .)
    NEQ             reduce using rule 13 (expr -> expr DIVINT expr .)
    LT              reduce using rule 13 (expr -> expr DIVINT expr .)
    GT              reduce using rule 13 (expr -> expr DIVINT expr .)
    IN              reduce using rule 13 (expr -> expr DIVINT expr .)
    CONS            reduce using rule 13 (expr -> expr DIVINT expr .)
    COMMA           reduce using rule 13 (expr -> expr DIVINT expr .)
    R_BRACK         reduce using rule 13 (expr -> expr DIVINT expr .)
    R_PAREN         reduce using rule 13 (expr -> expr DIVINT expr .)
    POW             shift and go to state 15
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 13 (expr -> expr DIVINT expr .) ]
  ! L_BRACK         [ reduce using rule 13 (expr -> expr DIVINT expr .) ]
  ! MULT            [ shift and go to state 16 ]
  ! DIVINT          [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]
  ! MOD             [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 20 ]
  ! MINUS           [ shift and go to state 21 ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]
  ! IN              [ shift and go to state 30 ]
  ! CONS            [ shift and go to state 31 ]


state 45

    (14) expr -> expr DIV expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 14 (expr -> expr DIV expr .)
    MULT            reduce using rule 14 (expr -> expr DIV expr .)
    DIVINT          reduce using rule 14 (expr -> expr DIV expr .)
    DIV             reduce using rule 14 (expr -> expr DIV expr .)
    MOD             reduce using rule 14 (expr -> expr DIV expr .)
    PLUS            reduce using rule 14 (expr -> expr DIV expr .)
    MINUS           reduce using rule 14 (expr -> expr DIV expr .)
    AND_ALSO        reduce using rule 14 (expr -> expr DIV expr .)
    OR_ELSE         reduce using rule 14 (expr -> expr DIV expr .)
    LTE             reduce using rule 14 (expr -> expr DIV expr .)
    GTE             reduce using rule 14 (expr -> expr DIV expr .)
    EQ_EQ           reduce using rule 14 (expr -> expr DIV expr .)
    NEQ             reduce using rule 14 (expr -> expr DIV expr .)
    LT              reduce using rule 14 (expr -> expr DIV expr .)
    GT              reduce using rule 14 (expr -> expr DIV expr .)
    IN              reduce using rule 14 (expr -> expr DIV expr .)
    CONS            reduce using rule 14 (expr -> expr DIV expr .)
    COMMA           reduce using rule 14 (expr -> expr DIV expr .)
    R_BRACK         reduce using rule 14 (expr -> expr DIV expr .)
    R_PAREN         reduce using rule 14 (expr -> expr DIV expr .)
    POW             shift and go to state 15
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 14 (expr -> expr DIV expr .) ]
  ! L_BRACK         [ reduce using rule 14 (expr -> expr DIV expr .) ]
  ! MULT            [ shift and go to state 16 ]
  ! DIVINT          [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]
  ! MOD             [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 20 ]
  ! MINUS           [ shift and go to state 21 ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]
  ! IN              [ shift and go to state 30 ]
  ! CONS            [ shift and go to state 31 ]


state 46

    (15) expr -> expr MOD expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 15 (expr -> expr MOD expr .)
    MULT            reduce using rule 15 (expr -> expr MOD expr .)
    DIVINT          reduce using rule 15 (expr -> expr MOD expr .)
    DIV             reduce using rule 15 (expr -> expr MOD expr .)
    MOD             reduce using rule 15 (expr -> expr MOD expr .)
    PLUS            reduce using rule 15 (expr -> expr MOD expr .)
    MINUS           reduce using rule 15 (expr -> expr MOD expr .)
    AND_ALSO        reduce using rule 15 (expr -> expr MOD expr .)
    OR_ELSE         reduce using rule 15 (expr -> expr MOD expr .)
    LTE             reduce using rule 15 (expr -> expr MOD expr .)
    GTE             reduce using rule 15 (expr -> expr MOD expr .)
    EQ_EQ           reduce using rule 15 (expr -> expr MOD expr .)
    NEQ             reduce using rule 15 (expr -> expr MOD expr .)
    LT              reduce using rule 15 (expr -> expr MOD expr .)
    GT              reduce using rule 15 (expr -> expr MOD expr .)
    IN              reduce using rule 15 (expr -> expr MOD expr .)
    CONS            reduce using rule 15 (expr -> expr MOD expr .)
    COMMA           reduce using rule 15 (expr -> expr MOD expr .)
    R_BRACK         reduce using rule 15 (expr -> expr MOD expr .)
    R_PAREN         reduce using rule 15 (expr -> expr MOD expr .)
    POW             shift and go to state 15
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 15 (expr -> expr MOD expr .) ]
  ! L_BRACK         [ reduce using rule 15 (expr -> expr MOD expr .) ]
  ! MULT            [ shift and go to state 16 ]
  ! DIVINT          [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]
  ! MOD             [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 20 ]
  ! MINUS           [ shift and go to state 21 ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]
  ! IN              [ shift and go to state 30 ]
  ! CONS            [ shift and go to state 31 ]


state 47

    (16) expr -> expr PLUS expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 16 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 16 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 16 (expr -> expr PLUS expr .)
    AND_ALSO        reduce using rule 16 (expr -> expr PLUS expr .)
    OR_ELSE         reduce using rule 16 (expr -> expr PLUS expr .)
    LTE             reduce using rule 16 (expr -> expr PLUS expr .)
    GTE             reduce using rule 16 (expr -> expr PLUS expr .)
    EQ_EQ           reduce using rule 16 (expr -> expr PLUS expr .)
    NEQ             reduce using rule 16 (expr -> expr PLUS expr .)
    LT              reduce using rule 16 (expr -> expr PLUS expr .)
    GT              reduce using rule 16 (expr -> expr PLUS expr .)
    IN              reduce using rule 16 (expr -> expr PLUS expr .)
    CONS            reduce using rule 16 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 16 (expr -> expr PLUS expr .)
    R_BRACK         reduce using rule 16 (expr -> expr PLUS expr .)
    R_PAREN         reduce using rule 16 (expr -> expr PLUS expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! MULT            [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! DIVINT          [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! L_BRACK         [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 20 ]
  ! MINUS           [ shift and go to state 21 ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]
  ! IN              [ shift and go to state 30 ]
  ! CONS            [ shift and go to state 31 ]


state 48

    (17) expr -> expr MINUS expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 17 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 17 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 17 (expr -> expr MINUS expr .)
    AND_ALSO        reduce using rule 17 (expr -> expr MINUS expr .)
    OR_ELSE         reduce using rule 17 (expr -> expr MINUS expr .)
    LTE             reduce using rule 17 (expr -> expr MINUS expr .)
    GTE             reduce using rule 17 (expr -> expr MINUS expr .)
    EQ_EQ           reduce using rule 17 (expr -> expr MINUS expr .)
    NEQ             reduce using rule 17 (expr -> expr MINUS expr .)
    LT              reduce using rule 17 (expr -> expr MINUS expr .)
    GT              reduce using rule 17 (expr -> expr MINUS expr .)
    IN              reduce using rule 17 (expr -> expr MINUS expr .)
    CONS            reduce using rule 17 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 17 (expr -> expr MINUS expr .)
    R_BRACK         reduce using rule 17 (expr -> expr MINUS expr .)
    R_PAREN         reduce using rule 17 (expr -> expr MINUS expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! MULT            [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! DIVINT          [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! L_BRACK         [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 20 ]
  ! MINUS           [ shift and go to state 21 ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]
  ! IN              [ shift and go to state 30 ]
  ! CONS            [ shift and go to state 31 ]


state 49

    (19) expr -> expr AND_ALSO expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 19 (expr -> expr AND_ALSO expr .)
    AND_ALSO        reduce using rule 19 (expr -> expr AND_ALSO expr .)
    OR_ELSE         reduce using rule 19 (expr -> expr AND_ALSO expr .)
    COMMA           reduce using rule 19 (expr -> expr AND_ALSO expr .)
    R_BRACK         reduce using rule 19 (expr -> expr AND_ALSO expr .)
    R_PAREN         reduce using rule 19 (expr -> expr AND_ALSO expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    LTE             shift and go to state 24
    GTE             shift and go to state 25
    EQ_EQ           shift and go to state 26
    NEQ             shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! MULT            [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! DIVINT          [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! DIV             [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! MOD             [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! PLUS            [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! MINUS           [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! LTE             [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! GTE             [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! EQ_EQ           [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! NEQ             [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! LT              [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! GT              [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! IN              [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! CONS            [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! L_BRACK         [ reduce using rule 19 (expr -> expr AND_ALSO expr .) ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]


state 50

    (20) expr -> expr OR_ELSE expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 20 (expr -> expr OR_ELSE expr .)
    AND_ALSO        reduce using rule 20 (expr -> expr OR_ELSE expr .)
    OR_ELSE         reduce using rule 20 (expr -> expr OR_ELSE expr .)
    COMMA           reduce using rule 20 (expr -> expr OR_ELSE expr .)
    R_BRACK         reduce using rule 20 (expr -> expr OR_ELSE expr .)
    R_PAREN         reduce using rule 20 (expr -> expr OR_ELSE expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    LTE             shift and go to state 24
    GTE             shift and go to state 25
    EQ_EQ           shift and go to state 26
    NEQ             shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! MULT            [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! DIVINT          [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! DIV             [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! MOD             [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! PLUS            [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! MINUS           [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! LTE             [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! GTE             [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! EQ_EQ           [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! NEQ             [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! LT              [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! GT              [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! IN              [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! CONS            [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! L_BRACK         [ reduce using rule 20 (expr -> expr OR_ELSE expr .) ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]


state 51

    (21) expr -> expr LTE expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 21 (expr -> expr LTE expr .)
    AND_ALSO        reduce using rule 21 (expr -> expr LTE expr .)
    OR_ELSE         reduce using rule 21 (expr -> expr LTE expr .)
    LTE             reduce using rule 21 (expr -> expr LTE expr .)
    GTE             reduce using rule 21 (expr -> expr LTE expr .)
    EQ_EQ           reduce using rule 21 (expr -> expr LTE expr .)
    NEQ             reduce using rule 21 (expr -> expr LTE expr .)
    LT              reduce using rule 21 (expr -> expr LTE expr .)
    GT              reduce using rule 21 (expr -> expr LTE expr .)
    COMMA           reduce using rule 21 (expr -> expr LTE expr .)
    R_BRACK         reduce using rule 21 (expr -> expr LTE expr .)
    R_PAREN         reduce using rule 21 (expr -> expr LTE expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 21 (expr -> expr LTE expr .) ]
  ! MULT            [ reduce using rule 21 (expr -> expr LTE expr .) ]
  ! DIVINT          [ reduce using rule 21 (expr -> expr LTE expr .) ]
  ! DIV             [ reduce using rule 21 (expr -> expr LTE expr .) ]
  ! MOD             [ reduce using rule 21 (expr -> expr LTE expr .) ]
  ! PLUS            [ reduce using rule 21 (expr -> expr LTE expr .) ]
  ! MINUS           [ reduce using rule 21 (expr -> expr LTE expr .) ]
  ! IN              [ reduce using rule 21 (expr -> expr LTE expr .) ]
  ! CONS            [ reduce using rule 21 (expr -> expr LTE expr .) ]
  ! L_BRACK         [ reduce using rule 21 (expr -> expr LTE expr .) ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]


state 52

    (22) expr -> expr GTE expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 22 (expr -> expr GTE expr .)
    AND_ALSO        reduce using rule 22 (expr -> expr GTE expr .)
    OR_ELSE         reduce using rule 22 (expr -> expr GTE expr .)
    LTE             reduce using rule 22 (expr -> expr GTE expr .)
    GTE             reduce using rule 22 (expr -> expr GTE expr .)
    EQ_EQ           reduce using rule 22 (expr -> expr GTE expr .)
    NEQ             reduce using rule 22 (expr -> expr GTE expr .)
    LT              reduce using rule 22 (expr -> expr GTE expr .)
    GT              reduce using rule 22 (expr -> expr GTE expr .)
    COMMA           reduce using rule 22 (expr -> expr GTE expr .)
    R_BRACK         reduce using rule 22 (expr -> expr GTE expr .)
    R_PAREN         reduce using rule 22 (expr -> expr GTE expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 22 (expr -> expr GTE expr .) ]
  ! MULT            [ reduce using rule 22 (expr -> expr GTE expr .) ]
  ! DIVINT          [ reduce using rule 22 (expr -> expr GTE expr .) ]
  ! DIV             [ reduce using rule 22 (expr -> expr GTE expr .) ]
  ! MOD             [ reduce using rule 22 (expr -> expr GTE expr .) ]
  ! PLUS            [ reduce using rule 22 (expr -> expr GTE expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr GTE expr .) ]
  ! IN              [ reduce using rule 22 (expr -> expr GTE expr .) ]
  ! CONS            [ reduce using rule 22 (expr -> expr GTE expr .) ]
  ! L_BRACK         [ reduce using rule 22 (expr -> expr GTE expr .) ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]


state 53

    (23) expr -> expr EQ_EQ expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 23 (expr -> expr EQ_EQ expr .)
    AND_ALSO        reduce using rule 23 (expr -> expr EQ_EQ expr .)
    OR_ELSE         reduce using rule 23 (expr -> expr EQ_EQ expr .)
    LTE             reduce using rule 23 (expr -> expr EQ_EQ expr .)
    GTE             reduce using rule 23 (expr -> expr EQ_EQ expr .)
    EQ_EQ           reduce using rule 23 (expr -> expr EQ_EQ expr .)
    NEQ             reduce using rule 23 (expr -> expr EQ_EQ expr .)
    LT              reduce using rule 23 (expr -> expr EQ_EQ expr .)
    GT              reduce using rule 23 (expr -> expr EQ_EQ expr .)
    COMMA           reduce using rule 23 (expr -> expr EQ_EQ expr .)
    R_BRACK         reduce using rule 23 (expr -> expr EQ_EQ expr .)
    R_PAREN         reduce using rule 23 (expr -> expr EQ_EQ expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 23 (expr -> expr EQ_EQ expr .) ]
  ! MULT            [ reduce using rule 23 (expr -> expr EQ_EQ expr .) ]
  ! DIVINT          [ reduce using rule 23 (expr -> expr EQ_EQ expr .) ]
  ! DIV             [ reduce using rule 23 (expr -> expr EQ_EQ expr .) ]
  ! MOD             [ reduce using rule 23 (expr -> expr EQ_EQ expr .) ]
  ! PLUS            [ reduce using rule 23 (expr -> expr EQ_EQ expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr EQ_EQ expr .) ]
  ! IN              [ reduce using rule 23 (expr -> expr EQ_EQ expr .) ]
  ! CONS            [ reduce using rule 23 (expr -> expr EQ_EQ expr .) ]
  ! L_BRACK         [ reduce using rule 23 (expr -> expr EQ_EQ expr .) ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]


state 54

    (24) expr -> expr NEQ expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 24 (expr -> expr NEQ expr .)
    AND_ALSO        reduce using rule 24 (expr -> expr NEQ expr .)
    OR_ELSE         reduce using rule 24 (expr -> expr NEQ expr .)
    LTE             reduce using rule 24 (expr -> expr NEQ expr .)
    GTE             reduce using rule 24 (expr -> expr NEQ expr .)
    EQ_EQ           reduce using rule 24 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 24 (expr -> expr NEQ expr .)
    LT              reduce using rule 24 (expr -> expr NEQ expr .)
    GT              reduce using rule 24 (expr -> expr NEQ expr .)
    COMMA           reduce using rule 24 (expr -> expr NEQ expr .)
    R_BRACK         reduce using rule 24 (expr -> expr NEQ expr .)
    R_PAREN         reduce using rule 24 (expr -> expr NEQ expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 24 (expr -> expr NEQ expr .) ]
  ! MULT            [ reduce using rule 24 (expr -> expr NEQ expr .) ]
  ! DIVINT          [ reduce using rule 24 (expr -> expr NEQ expr .) ]
  ! DIV             [ reduce using rule 24 (expr -> expr NEQ expr .) ]
  ! MOD             [ reduce using rule 24 (expr -> expr NEQ expr .) ]
  ! PLUS            [ reduce using rule 24 (expr -> expr NEQ expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr NEQ expr .) ]
  ! IN              [ reduce using rule 24 (expr -> expr NEQ expr .) ]
  ! CONS            [ reduce using rule 24 (expr -> expr NEQ expr .) ]
  ! L_BRACK         [ reduce using rule 24 (expr -> expr NEQ expr .) ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]


state 55

    (25) expr -> expr LT expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 25 (expr -> expr LT expr .)
    AND_ALSO        reduce using rule 25 (expr -> expr LT expr .)
    OR_ELSE         reduce using rule 25 (expr -> expr LT expr .)
    LTE             reduce using rule 25 (expr -> expr LT expr .)
    GTE             reduce using rule 25 (expr -> expr LT expr .)
    EQ_EQ           reduce using rule 25 (expr -> expr LT expr .)
    NEQ             reduce using rule 25 (expr -> expr LT expr .)
    LT              reduce using rule 25 (expr -> expr LT expr .)
    GT              reduce using rule 25 (expr -> expr LT expr .)
    COMMA           reduce using rule 25 (expr -> expr LT expr .)
    R_BRACK         reduce using rule 25 (expr -> expr LT expr .)
    R_PAREN         reduce using rule 25 (expr -> expr LT expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! MULT            [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! DIVINT          [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! IN              [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! CONS            [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! L_BRACK         [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]


state 56

    (26) expr -> expr GT expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 26 (expr -> expr GT expr .)
    AND_ALSO        reduce using rule 26 (expr -> expr GT expr .)
    OR_ELSE         reduce using rule 26 (expr -> expr GT expr .)
    LTE             reduce using rule 26 (expr -> expr GT expr .)
    GTE             reduce using rule 26 (expr -> expr GT expr .)
    EQ_EQ           reduce using rule 26 (expr -> expr GT expr .)
    NEQ             reduce using rule 26 (expr -> expr GT expr .)
    LT              reduce using rule 26 (expr -> expr GT expr .)
    GT              reduce using rule 26 (expr -> expr GT expr .)
    COMMA           reduce using rule 26 (expr -> expr GT expr .)
    R_BRACK         reduce using rule 26 (expr -> expr GT expr .)
    R_PAREN         reduce using rule 26 (expr -> expr GT expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 26 (expr -> expr GT expr .) ]
  ! MULT            [ reduce using rule 26 (expr -> expr GT expr .) ]
  ! DIVINT          [ reduce using rule 26 (expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 26 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 26 (expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 26 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr GT expr .) ]
  ! IN              [ reduce using rule 26 (expr -> expr GT expr .) ]
  ! CONS            [ reduce using rule 26 (expr -> expr GT expr .) ]
  ! L_BRACK         [ reduce using rule 26 (expr -> expr GT expr .) ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]


state 57

    (27) expr -> expr IN expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 27 (expr -> expr IN expr .)
    AND_ALSO        reduce using rule 27 (expr -> expr IN expr .)
    OR_ELSE         reduce using rule 27 (expr -> expr IN expr .)
    LTE             reduce using rule 27 (expr -> expr IN expr .)
    GTE             reduce using rule 27 (expr -> expr IN expr .)
    EQ_EQ           reduce using rule 27 (expr -> expr IN expr .)
    NEQ             reduce using rule 27 (expr -> expr IN expr .)
    LT              reduce using rule 27 (expr -> expr IN expr .)
    GT              reduce using rule 27 (expr -> expr IN expr .)
    IN              reduce using rule 27 (expr -> expr IN expr .)
    CONS            reduce using rule 27 (expr -> expr IN expr .)
    COMMA           reduce using rule 27 (expr -> expr IN expr .)
    R_BRACK         reduce using rule 27 (expr -> expr IN expr .)
    R_PAREN         reduce using rule 27 (expr -> expr IN expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 27 (expr -> expr IN expr .) ]
  ! MULT            [ reduce using rule 27 (expr -> expr IN expr .) ]
  ! DIVINT          [ reduce using rule 27 (expr -> expr IN expr .) ]
  ! DIV             [ reduce using rule 27 (expr -> expr IN expr .) ]
  ! MOD             [ reduce using rule 27 (expr -> expr IN expr .) ]
  ! PLUS            [ reduce using rule 27 (expr -> expr IN expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr IN expr .) ]
  ! L_BRACK         [ reduce using rule 27 (expr -> expr IN expr .) ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]
  ! IN              [ shift and go to state 30 ]
  ! CONS            [ shift and go to state 31 ]


state 58

    (28) expr -> expr CONS expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 28 (expr -> expr CONS expr .)
    AND_ALSO        reduce using rule 28 (expr -> expr CONS expr .)
    OR_ELSE         reduce using rule 28 (expr -> expr CONS expr .)
    LTE             reduce using rule 28 (expr -> expr CONS expr .)
    GTE             reduce using rule 28 (expr -> expr CONS expr .)
    EQ_EQ           reduce using rule 28 (expr -> expr CONS expr .)
    NEQ             reduce using rule 28 (expr -> expr CONS expr .)
    LT              reduce using rule 28 (expr -> expr CONS expr .)
    GT              reduce using rule 28 (expr -> expr CONS expr .)
    COMMA           reduce using rule 28 (expr -> expr CONS expr .)
    R_BRACK         reduce using rule 28 (expr -> expr CONS expr .)
    R_PAREN         reduce using rule 28 (expr -> expr CONS expr .)
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32

  ! POW             [ reduce using rule 28 (expr -> expr CONS expr .) ]
  ! MULT            [ reduce using rule 28 (expr -> expr CONS expr .) ]
  ! DIVINT          [ reduce using rule 28 (expr -> expr CONS expr .) ]
  ! DIV             [ reduce using rule 28 (expr -> expr CONS expr .) ]
  ! MOD             [ reduce using rule 28 (expr -> expr CONS expr .) ]
  ! PLUS            [ reduce using rule 28 (expr -> expr CONS expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr CONS expr .) ]
  ! IN              [ reduce using rule 28 (expr -> expr CONS expr .) ]
  ! CONS            [ reduce using rule 28 (expr -> expr CONS expr .) ]
  ! L_BRACK         [ reduce using rule 28 (expr -> expr CONS expr .) ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]


state 59

    (30) expr -> expr L_BRACK expr . R_BRACK
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    R_BRACK         shift and go to state 65
    POW             shift and go to state 15
    MULT            shift and go to state 16
    DIVINT          shift and go to state 17
    DIV             shift and go to state 18
    MOD             shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    AND_ALSO        shift and go to state 22
    OR_ELSE         shift and go to state 23
    LTE             shift and go to state 24
    GTE             shift and go to state 25
    EQ_EQ           shift and go to state 26
    NEQ             shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    IN              shift and go to state 30
    CONS            shift and go to state 31
    L_BRACK         shift and go to state 32


state 60

    (8) expr -> HASHTAG INTEGER expr .
    (11) expr -> expr . POW expr
    (12) expr -> expr . MULT expr
    (13) expr -> expr . DIVINT expr
    (14) expr -> expr . DIV expr
    (15) expr -> expr . MOD expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (19) expr -> expr . AND_ALSO expr
    (20) expr -> expr . OR_ELSE expr
    (21) expr -> expr . LTE expr
    (22) expr -> expr . GTE expr
    (23) expr -> expr . EQ_EQ expr
    (24) expr -> expr . NEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr
    (27) expr -> expr . IN expr
    (28) expr -> expr . CONS expr
    (30) expr -> expr . L_BRACK expr R_BRACK

    SEMICOLON       reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    POW             reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    MULT            reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    DIVINT          reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    DIV             reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    MOD             reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    PLUS            reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    MINUS           reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    AND_ALSO        reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    OR_ELSE         reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    LTE             reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    GTE             reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    EQ_EQ           reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    NEQ             reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    LT              reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    GT              reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    IN              reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    CONS            reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    L_BRACK         reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    COMMA           reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    R_BRACK         reduce using rule 8 (expr -> HASHTAG INTEGER expr .)
    R_PAREN         reduce using rule 8 (expr -> HASHTAG INTEGER expr .)

  ! POW             [ shift and go to state 15 ]
  ! MULT            [ shift and go to state 16 ]
  ! DIVINT          [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]
  ! MOD             [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 20 ]
  ! MINUS           [ shift and go to state 21 ]
  ! AND_ALSO        [ shift and go to state 22 ]
  ! OR_ELSE         [ shift and go to state 23 ]
  ! LTE             [ shift and go to state 24 ]
  ! GTE             [ shift and go to state 25 ]
  ! EQ_EQ           [ shift and go to state 26 ]
  ! NEQ             [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GT              [ shift and go to state 29 ]
  ! IN              [ shift and go to state 30 ]
  ! CONS            [ shift and go to state 31 ]
  ! L_BRACK         [ shift and go to state 32 ]


state 61

    (31) list -> L_BRACK sequence R_BRACK .

    SEMICOLON       reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    POW             reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    MULT            reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    DIVINT          reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    DIV             reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    MOD             reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    PLUS            reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    MINUS           reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    AND_ALSO        reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    OR_ELSE         reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    LTE             reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    GTE             reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    EQ_EQ           reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    NEQ             reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    LT              reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    GT              reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    IN              reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    CONS            reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    L_BRACK         reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    COMMA           reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    R_BRACK         reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)
    R_PAREN         reduce using rule 31 (list -> L_BRACK sequence R_BRACK .)


state 62

    (33) sequence -> expr COMMA . sequence
    (33) sequence -> . expr COMMA sequence
    (34) sequence -> . expr
    (2) expr -> . INTEGER
    (3) expr -> . FLOAT
    (4) expr -> . STRING
    (5) expr -> . BOOLEAN
    (6) expr -> . list
    (7) expr -> . tuple
    (8) expr -> . HASHTAG INTEGER expr
    (11) expr -> . expr POW expr
    (12) expr -> . expr MULT expr
    (13) expr -> . expr DIVINT expr
    (14) expr -> . expr DIV expr
    (15) expr -> . expr MOD expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr AND_ALSO expr
    (20) expr -> . expr OR_ELSE expr
    (21) expr -> . expr LTE expr
    (22) expr -> . expr GTE expr
    (23) expr -> . expr EQ_EQ expr
    (24) expr -> . expr NEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . expr IN expr
    (28) expr -> . expr CONS expr
    (29) expr -> . NOT expr
    (30) expr -> . expr L_BRACK expr R_BRACK
    (35) expr -> . L_PAREN expr R_PAREN
    (31) list -> . L_BRACK sequence R_BRACK
    (32) list -> . L_BRACK R_BRACK
    (9) tuple -> . L_PAREN sequence R_PAREN
    (10) tuple -> . L_PAREN R_PAREN

    INTEGER         shift and go to state 3
    FLOAT           shift and go to state 4
    STRING          shift and go to state 5
    BOOLEAN         shift and go to state 6
    HASHTAG         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 11
    L_PAREN         shift and go to state 13
    L_BRACK         shift and go to state 12

    expr                           shift and go to state 38
    sequence                       shift and go to state 66
    list                           shift and go to state 7
    tuple                          shift and go to state 8

state 63

    (35) expr -> L_PAREN expr R_PAREN .

    SEMICOLON       reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    POW             reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    MULT            reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    DIVINT          reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    DIV             reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    MOD             reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    PLUS            reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    MINUS           reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    AND_ALSO        reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    OR_ELSE         reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    LTE             reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    GTE             reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    EQ_EQ           reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    NEQ             reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    LT              reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    GT              reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    IN              reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    CONS            reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    L_BRACK         reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    COMMA           reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    R_BRACK         reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)
    R_PAREN         reduce using rule 35 (expr -> L_PAREN expr R_PAREN .)


state 64

    (9) tuple -> L_PAREN sequence R_PAREN .

    SEMICOLON       reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    POW             reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    MULT            reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    DIVINT          reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    DIV             reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    MOD             reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    PLUS            reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    MINUS           reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    AND_ALSO        reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    OR_ELSE         reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    LTE             reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    GTE             reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    EQ_EQ           reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    NEQ             reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    LT              reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    GT              reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    IN              reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    CONS            reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    L_BRACK         reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    COMMA           reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    R_BRACK         reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)
    R_PAREN         reduce using rule 9 (tuple -> L_PAREN sequence R_PAREN .)


state 65

    (30) expr -> expr L_BRACK expr R_BRACK .

    SEMICOLON       reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    POW             reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    MULT            reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    DIVINT          reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    DIV             reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    MOD             reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    PLUS            reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    MINUS           reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    AND_ALSO        reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    OR_ELSE         reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    LTE             reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    GTE             reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    EQ_EQ           reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    NEQ             reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    LT              reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    GT              reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    IN              reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    CONS            reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    L_BRACK         reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    COMMA           reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    R_BRACK         reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)
    R_PAREN         reduce using rule 30 (expr -> expr L_BRACK expr R_BRACK .)


state 66

    (33) sequence -> expr COMMA sequence .

    R_BRACK         reduce using rule 33 (sequence -> expr COMMA sequence .)
    R_PAREN         reduce using rule 33 (sequence -> expr COMMA sequence .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for R_PAREN in state 39 resolved as shift
