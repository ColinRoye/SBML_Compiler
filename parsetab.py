
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftAND_ALSOOR_ELSEleftEQ_EQNEQLTLTEGTGTErightCONSleftINleftMINUSPLUSleftMULTDIVDIVINTMODrightUMINUSrightPOWleftL_BRACKR_BRACKrightHASHTAGleftL_PARENR_PARENAND_ALSO BOOLEAN COLON COMMA CONS DIV DIVINT EQ EQ_EQ FLOAT GT GTE HASHTAG IN INTEGER LT LTE L_BRACK L_PAREN MINUS MOD MULT NEQ NOT OR_ELSE PLUS POW R_BRACK R_PAREN SEMICOLON STRINGline : expr SEMICOLONexpr : INTEGER\n            | FLOAT\n            | STRING\n            | BOOLEAN\n            | list\n            | tupleexpr : HASHTAG INTEGER expr %prec HASHTAGtuple : L_PAREN sequence R_PAREN\n             | L_PAREN R_PARENexpr : expr POW expr\n            | expr MULT expr\n            | expr DIVINT expr\n            | expr DIV expr\n            | expr MOD expr\n            | expr PLUS expr\n            | expr MINUS exprexpr : MINUS expr %prec UMINUSexpr : expr AND_ALSO expr\n            | expr OR_ELSE expr\n            | expr LTE expr\n            | expr GTE expr\n            | expr EQ_EQ expr\n            | expr NEQ expr\n            | expr LT expr\n            | expr GT exprexpr : expr IN expr\n            | expr CONS exprexpr : NOT expr %prec UMINUSexpr : expr L_BRACK expr R_BRACKlist : L_BRACK sequence R_BRACK\n            | L_BRACK R_BRACKsequence : expr COMMA sequence\n                   | exprexpr : L_PAREN expr R_PAREN'
    
_lr_action_items = {'INTEGER':([0,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,62,],[3,33,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'FLOAT':([0,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,62,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'STRING':([0,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,62,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'BOOLEAN':([0,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,62,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'HASHTAG':([0,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,62,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'MINUS':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[10,21,-2,-3,-4,-5,-6,-7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-18,-29,-32,21,21,-10,-11,-12,-13,-14,-15,-16,-17,21,21,21,21,21,21,21,21,21,21,21,-8,-31,10,-35,-9,-30,]),'NOT':([0,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,62,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'L_PAREN':([0,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,62,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'L_BRACK':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[12,32,-2,-3,-4,-5,-6,-7,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,32,32,-32,32,32,-10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-8,-31,12,-35,-9,-30,]),'$end':([1,14,],[0,-1,]),'SEMICOLON':([2,3,4,5,6,7,8,34,35,37,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,63,64,65,],[14,-2,-3,-4,-5,-6,-7,-18,-29,-32,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-8,-31,-35,-9,-30,]),'POW':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[15,-2,-3,-4,-5,-6,-7,15,15,-32,15,15,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-8,-31,-35,-9,-30,]),'MULT':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[16,-2,-3,-4,-5,-6,-7,-18,-29,-32,16,16,-10,-11,-12,-13,-14,-15,16,16,16,16,16,16,16,16,16,16,16,16,16,-8,-31,-35,-9,-30,]),'DIVINT':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[17,-2,-3,-4,-5,-6,-7,-18,-29,-32,17,17,-10,-11,-12,-13,-14,-15,17,17,17,17,17,17,17,17,17,17,17,17,17,-8,-31,-35,-9,-30,]),'DIV':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[18,-2,-3,-4,-5,-6,-7,-18,-29,-32,18,18,-10,-11,-12,-13,-14,-15,18,18,18,18,18,18,18,18,18,18,18,18,18,-8,-31,-35,-9,-30,]),'MOD':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[19,-2,-3,-4,-5,-6,-7,-18,-29,-32,19,19,-10,-11,-12,-13,-14,-15,19,19,19,19,19,19,19,19,19,19,19,19,19,-8,-31,-35,-9,-30,]),'PLUS':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[20,-2,-3,-4,-5,-6,-7,-18,-29,-32,20,20,-10,-11,-12,-13,-14,-15,-16,-17,20,20,20,20,20,20,20,20,20,20,20,-8,-31,-35,-9,-30,]),'AND_ALSO':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[22,-2,-3,-4,-5,-6,-7,-18,-29,-32,22,22,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,22,-8,-31,-35,-9,-30,]),'OR_ELSE':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[23,-2,-3,-4,-5,-6,-7,-18,-29,-32,23,23,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,23,-8,-31,-35,-9,-30,]),'LTE':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[24,-2,-3,-4,-5,-6,-7,-18,-29,-32,24,24,-10,-11,-12,-13,-14,-15,-16,-17,24,24,-21,-22,-23,-24,-25,-26,-27,-28,24,-8,-31,-35,-9,-30,]),'GTE':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[25,-2,-3,-4,-5,-6,-7,-18,-29,-32,25,25,-10,-11,-12,-13,-14,-15,-16,-17,25,25,-21,-22,-23,-24,-25,-26,-27,-28,25,-8,-31,-35,-9,-30,]),'EQ_EQ':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[26,-2,-3,-4,-5,-6,-7,-18,-29,-32,26,26,-10,-11,-12,-13,-14,-15,-16,-17,26,26,-21,-22,-23,-24,-25,-26,-27,-28,26,-8,-31,-35,-9,-30,]),'NEQ':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[27,-2,-3,-4,-5,-6,-7,-18,-29,-32,27,27,-10,-11,-12,-13,-14,-15,-16,-17,27,27,-21,-22,-23,-24,-25,-26,-27,-28,27,-8,-31,-35,-9,-30,]),'LT':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[28,-2,-3,-4,-5,-6,-7,-18,-29,-32,28,28,-10,-11,-12,-13,-14,-15,-16,-17,28,28,-21,-22,-23,-24,-25,-26,-27,-28,28,-8,-31,-35,-9,-30,]),'GT':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[29,-2,-3,-4,-5,-6,-7,-18,-29,-32,29,29,-10,-11,-12,-13,-14,-15,-16,-17,29,29,-21,-22,-23,-24,-25,-26,-27,-28,29,-8,-31,-35,-9,-30,]),'IN':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[30,-2,-3,-4,-5,-6,-7,-18,-29,-32,30,30,-10,-11,-12,-13,-14,-15,-16,-17,30,30,30,30,30,30,30,30,-27,30,30,-8,-31,-35,-9,-30,]),'CONS':([2,3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,],[31,-2,-3,-4,-5,-6,-7,-18,-29,-32,31,31,-10,-11,-12,-13,-14,-15,-16,-17,31,31,31,31,31,31,31,31,-27,31,31,-8,-31,-35,-9,-30,]),'COMMA':([3,4,5,6,7,8,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,63,64,65,],[-2,-3,-4,-5,-6,-7,-18,-29,-32,62,62,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-8,-31,-35,-9,-30,]),'R_BRACK':([3,4,5,6,7,8,12,34,35,36,37,38,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,],[-2,-3,-4,-5,-6,-7,37,-18,-29,61,-32,-34,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,65,-8,-31,-35,-9,-30,-33,]),'R_PAREN':([3,4,5,6,7,8,13,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,63,64,65,66,],[-2,-3,-4,-5,-6,-7,40,-18,-29,-32,-34,63,-10,64,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-8,-31,-35,-9,-30,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'line':([0,],[1,]),'expr':([0,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,62,],[2,34,35,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,]),'list':([0,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,62,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'tuple':([0,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,62,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'sequence':([12,13,62,],[36,41,66,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> line","S'",1,None,None,None),
  ('line -> expr SEMICOLON','line',2,'p_line','sbml.py',253),
  ('expr -> INTEGER','expr',1,'p_expr','sbml.py',262),
  ('expr -> FLOAT','expr',1,'p_expr','sbml.py',263),
  ('expr -> STRING','expr',1,'p_expr','sbml.py',264),
  ('expr -> BOOLEAN','expr',1,'p_expr','sbml.py',265),
  ('expr -> list','expr',1,'p_expr','sbml.py',266),
  ('expr -> tuple','expr',1,'p_expr','sbml.py',267),
  ('expr -> HASHTAG INTEGER expr','expr',3,'p_tuple_index','sbml.py',271),
  ('tuple -> L_PAREN sequence R_PAREN','tuple',3,'p_tuple','sbml.py',276),
  ('tuple -> L_PAREN R_PAREN','tuple',2,'p_tuple','sbml.py',277),
  ('expr -> expr POW expr','expr',3,'p_binop_expr','sbml.py',284),
  ('expr -> expr MULT expr','expr',3,'p_binop_expr','sbml.py',285),
  ('expr -> expr DIVINT expr','expr',3,'p_binop_expr','sbml.py',286),
  ('expr -> expr DIV expr','expr',3,'p_binop_expr','sbml.py',287),
  ('expr -> expr MOD expr','expr',3,'p_binop_expr','sbml.py',288),
  ('expr -> expr PLUS expr','expr',3,'p_binop_expr','sbml.py',289),
  ('expr -> expr MINUS expr','expr',3,'p_binop_expr','sbml.py',290),
  ('expr -> MINUS expr','expr',2,'p_expr_uminus','sbml.py',294),
  ('expr -> expr AND_ALSO expr','expr',3,'p_boolop','sbml.py',298),
  ('expr -> expr OR_ELSE expr','expr',3,'p_boolop','sbml.py',299),
  ('expr -> expr LTE expr','expr',3,'p_boolop','sbml.py',300),
  ('expr -> expr GTE expr','expr',3,'p_boolop','sbml.py',301),
  ('expr -> expr EQ_EQ expr','expr',3,'p_boolop','sbml.py',302),
  ('expr -> expr NEQ expr','expr',3,'p_boolop','sbml.py',303),
  ('expr -> expr LT expr','expr',3,'p_boolop','sbml.py',304),
  ('expr -> expr GT expr','expr',3,'p_boolop','sbml.py',305),
  ('expr -> expr IN expr','expr',3,'p_listop','sbml.py',309),
  ('expr -> expr CONS expr','expr',3,'p_listop','sbml.py',310),
  ('expr -> NOT expr','expr',2,'p_negationOp','sbml.py',318),
  ('expr -> expr L_BRACK expr R_BRACK','expr',4,'p_list_index','sbml.py',322),
  ('list -> L_BRACK sequence R_BRACK','list',3,'p_list','sbml.py',327),
  ('list -> L_BRACK R_BRACK','list',2,'p_list','sbml.py',328),
  ('sequence -> expr COMMA sequence','sequence',3,'p_sequence','sbml.py',338),
  ('sequence -> expr','sequence',1,'p_sequence','sbml.py',339),
  ('expr -> L_PAREN expr R_PAREN','expr',3,'p_parenthesized','sbml.py',349),
]
