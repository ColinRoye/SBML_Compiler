
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftAND_ALSOOR_ELSEleftEQ_EQNEQLTLTEGTGTErightCONSleftINleftMINUSPLUSleftMULTDIVDIVINTMODrightUMINUSrightPOWleftL_BRACKR_BRACKrightHASHTAGleftL_PARENR_PARENAND_ALSO BOOLEAN COLON COMMA CONS DIV DIVINT EQ EQ_EQ FLOAT GT GTE HASHTAG IN INTEGER LT LTE L_BRACK L_PAREN MINUS MOD MULT NEQ NOT OR_ELSE PLUS POW R_BRACK R_PAREN SEMICOLON STRING VARIABLEline : expr SEMICOLONexpr : INTEGER\n            | FLOAT\n            | STRING\n            | BOOLEAN\n            | VARIABLE\n            | list\n            | tupleexpr : expr indexSequenceList EQ exprexpr : HASHTAG INTEGER expr %prec HASHTAGtuple : L_PAREN sequence R_PAREN\n             | L_PAREN R_PARENexpr : expr POW expr\n            | expr MULT expr\n            | expr DIVINT expr\n            | expr DIV expr\n            | expr MOD expr\n            | expr PLUS expr\n            | expr MINUS exprexpr : MINUS expr %prec UMINUSexpr : expr AND_ALSO expr\n            | expr OR_ELSE expr\n            | expr LTE expr\n            | expr GTE expr\n            | expr EQ_EQ expr\n            | expr NEQ expr\n            | expr LT expr\n            | expr GT exprexpr : expr IN expr\n            | expr CONS exprexpr : NOT expr %prec UMINUSexpr : expr L_BRACK expr R_BRACKlist : L_BRACK sequence R_BRACK\n            | L_BRACK R_BRACKsequence : expr COMMA sequence\n                   | exprexpr : L_PAREN expr R_PARENexpr : expr EQ exprindexSequenceList : indexSequenceList indexTkn\n                         | indexTknindexTkn : L_BRACK INTEGER R_BRACK'
    
_lr_action_items = {'INTEGER':([0,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,46,48,71,],[3,37,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,68,3,3,75,3,]),'FLOAT':([0,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,46,71,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'STRING':([0,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,46,71,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'BOOLEAN':([0,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,46,71,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'VARIABLE':([0,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,46,71,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'HASHTAG':([0,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,46,71,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'MINUS':([0,2,3,4,5,6,7,8,9,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,41,42,43,44,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,],[11,24,-2,-3,-4,-5,-6,-7,-8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-20,-31,-34,24,24,-12,11,24,-13,-14,-15,-16,-17,-18,-19,24,24,24,24,24,24,24,24,24,24,24,-2,-10,-33,11,-37,-11,24,-32,]),'NOT':([0,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,46,71,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'L_PAREN':([0,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,46,71,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'L_BRACK':([0,2,3,4,5,6,7,8,9,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,],[13,35,-2,-3,-4,-5,-6,-7,-8,13,13,13,13,48,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-40,13,35,35,-34,35,35,-12,13,-39,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-2,-10,-33,13,-37,-11,35,-32,-41,]),'$end':([1,15,],[0,-1,]),'SEMICOLON':([2,3,4,5,6,7,8,9,38,39,41,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,72,73,74,76,],[15,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,-12,-38,-13,-14,-15,-16,-17,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-10,-33,-37,-11,-9,-32,]),'POW':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[18,-2,-3,-4,-5,-6,-7,-8,18,18,-34,18,18,-12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-2,-10,-33,-37,-11,18,-32,]),'MULT':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[19,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,19,19,-12,19,-13,-14,-15,-16,-17,19,19,19,19,19,19,19,19,19,19,19,19,19,-2,-10,-33,-37,-11,19,-32,]),'DIVINT':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[20,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,20,20,-12,20,-13,-14,-15,-16,-17,20,20,20,20,20,20,20,20,20,20,20,20,20,-2,-10,-33,-37,-11,20,-32,]),'DIV':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[21,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,21,21,-12,21,-13,-14,-15,-16,-17,21,21,21,21,21,21,21,21,21,21,21,21,21,-2,-10,-33,-37,-11,21,-32,]),'MOD':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[22,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,22,22,-12,22,-13,-14,-15,-16,-17,22,22,22,22,22,22,22,22,22,22,22,22,22,-2,-10,-33,-37,-11,22,-32,]),'PLUS':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[23,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,23,23,-12,23,-13,-14,-15,-16,-17,-18,-19,23,23,23,23,23,23,23,23,23,23,23,-2,-10,-33,-37,-11,23,-32,]),'AND_ALSO':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[25,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,25,25,-12,25,-13,-14,-15,-16,-17,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,25,-2,-10,-33,-37,-11,25,-32,]),'OR_ELSE':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[26,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,26,26,-12,26,-13,-14,-15,-16,-17,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,26,-2,-10,-33,-37,-11,26,-32,]),'LTE':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[27,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,27,27,-12,27,-13,-14,-15,-16,-17,-18,-19,27,27,-23,-24,-25,-26,-27,-28,-29,-30,27,-2,-10,-33,-37,-11,27,-32,]),'GTE':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[28,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,28,28,-12,28,-13,-14,-15,-16,-17,-18,-19,28,28,-23,-24,-25,-26,-27,-28,-29,-30,28,-2,-10,-33,-37,-11,28,-32,]),'EQ_EQ':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[29,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,29,29,-12,29,-13,-14,-15,-16,-17,-18,-19,29,29,-23,-24,-25,-26,-27,-28,-29,-30,29,-2,-10,-33,-37,-11,29,-32,]),'NEQ':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[30,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,30,30,-12,30,-13,-14,-15,-16,-17,-18,-19,30,30,-23,-24,-25,-26,-27,-28,-29,-30,30,-2,-10,-33,-37,-11,30,-32,]),'LT':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[31,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,31,31,-12,31,-13,-14,-15,-16,-17,-18,-19,31,31,-23,-24,-25,-26,-27,-28,-29,-30,31,-2,-10,-33,-37,-11,31,-32,]),'GT':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[32,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,32,32,-12,32,-13,-14,-15,-16,-17,-18,-19,32,32,-23,-24,-25,-26,-27,-28,-29,-30,32,-2,-10,-33,-37,-11,32,-32,]),'IN':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[33,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,33,33,-12,33,-13,-14,-15,-16,-17,-18,-19,33,33,33,33,33,33,33,33,-29,33,33,-2,-10,-33,-37,-11,33,-32,]),'CONS':([2,3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,],[34,-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,34,34,-12,34,-13,-14,-15,-16,-17,-18,-19,34,34,34,34,34,34,34,34,-29,34,34,-2,-10,-33,-37,-11,34,-32,]),'EQ':([2,3,4,5,6,7,8,9,16,36,38,39,41,42,43,44,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,77,],[17,-2,-3,-4,-5,-6,-7,-8,46,-40,-20,-31,-34,17,17,-12,-39,17,-13,-14,-15,-16,-17,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,17,-2,-10,-33,-37,-11,17,-32,-41,]),'COMMA':([3,4,5,6,7,8,9,38,39,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,72,73,74,76,],[-2,-3,-4,-5,-6,-7,-8,-20,-31,-34,71,71,-12,-38,-13,-14,-15,-16,-17,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-10,-33,-37,-11,-9,-32,]),'R_BRACK':([3,4,5,6,7,8,9,13,38,39,40,41,42,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,78,],[-2,-3,-4,-5,-6,-7,-8,41,-20,-31,70,-34,-36,-12,-38,-13,-14,-15,-16,-17,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,76,77,-10,-33,-37,-11,-9,77,-32,-35,]),'R_PAREN':([3,4,5,6,7,8,9,14,38,39,41,42,43,44,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,72,73,74,76,78,],[-2,-3,-4,-5,-6,-7,-8,44,-20,-31,-34,-36,72,-12,73,-38,-13,-14,-15,-16,-17,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-10,-33,-37,-11,-9,-32,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'line':([0,],[1,]),'expr':([0,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,46,71,],[2,38,39,42,43,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,74,42,]),'list':([0,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,46,71,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'tuple':([0,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,46,71,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'indexSequenceList':([2,38,39,42,43,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,74,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'indexTkn':([2,16,38,39,42,43,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,74,],[36,47,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'sequence':([13,14,71,],[40,45,78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> line","S'",1,None,None,None),
  ('line -> expr SEMICOLON','line',2,'p_line','sbml.py',369),
  ('expr -> INTEGER','expr',1,'p_expr','sbml.py',379),
  ('expr -> FLOAT','expr',1,'p_expr','sbml.py',380),
  ('expr -> STRING','expr',1,'p_expr','sbml.py',381),
  ('expr -> BOOLEAN','expr',1,'p_expr','sbml.py',382),
  ('expr -> VARIABLE','expr',1,'p_expr','sbml.py',383),
  ('expr -> list','expr',1,'p_expr','sbml.py',384),
  ('expr -> tuple','expr',1,'p_expr','sbml.py',385),
  ('expr -> expr indexSequenceList EQ expr','expr',4,'p_list_assignment','sbml.py',414),
  ('expr -> HASHTAG INTEGER expr','expr',3,'p_tuple_index','sbml.py',419),
  ('tuple -> L_PAREN sequence R_PAREN','tuple',3,'p_tuple','sbml.py',424),
  ('tuple -> L_PAREN R_PAREN','tuple',2,'p_tuple','sbml.py',425),
  ('expr -> expr POW expr','expr',3,'p_binop_expr','sbml.py',432),
  ('expr -> expr MULT expr','expr',3,'p_binop_expr','sbml.py',433),
  ('expr -> expr DIVINT expr','expr',3,'p_binop_expr','sbml.py',434),
  ('expr -> expr DIV expr','expr',3,'p_binop_expr','sbml.py',435),
  ('expr -> expr MOD expr','expr',3,'p_binop_expr','sbml.py',436),
  ('expr -> expr PLUS expr','expr',3,'p_binop_expr','sbml.py',437),
  ('expr -> expr MINUS expr','expr',3,'p_binop_expr','sbml.py',438),
  ('expr -> MINUS expr','expr',2,'p_expr_uminus','sbml.py',442),
  ('expr -> expr AND_ALSO expr','expr',3,'p_boolop','sbml.py',446),
  ('expr -> expr OR_ELSE expr','expr',3,'p_boolop','sbml.py',447),
  ('expr -> expr LTE expr','expr',3,'p_boolop','sbml.py',448),
  ('expr -> expr GTE expr','expr',3,'p_boolop','sbml.py',449),
  ('expr -> expr EQ_EQ expr','expr',3,'p_boolop','sbml.py',450),
  ('expr -> expr NEQ expr','expr',3,'p_boolop','sbml.py',451),
  ('expr -> expr LT expr','expr',3,'p_boolop','sbml.py',452),
  ('expr -> expr GT expr','expr',3,'p_boolop','sbml.py',453),
  ('expr -> expr IN expr','expr',3,'p_listop','sbml.py',457),
  ('expr -> expr CONS expr','expr',3,'p_listop','sbml.py',458),
  ('expr -> NOT expr','expr',2,'p_negationOp','sbml.py',462),
  ('expr -> expr L_BRACK expr R_BRACK','expr',4,'p_list_index','sbml.py',472),
  ('list -> L_BRACK sequence R_BRACK','list',3,'p_list','sbml.py',476),
  ('list -> L_BRACK R_BRACK','list',2,'p_list','sbml.py',477),
  ('sequence -> expr COMMA sequence','sequence',3,'p_sequence','sbml.py',484),
  ('sequence -> expr','sequence',1,'p_sequence','sbml.py',485),
  ('expr -> L_PAREN expr R_PAREN','expr',3,'p_parenthesized','sbml.py',492),
  ('expr -> expr EQ expr','expr',3,'p_assignment','sbml.py',507),
  ('indexSequenceList -> indexSequenceList indexTkn','indexSequenceList',2,'p_index_sequence_list','sbml.py',516),
  ('indexSequenceList -> indexTkn','indexSequenceList',1,'p_index_sequence_list','sbml.py',517),
  ('indexTkn -> L_BRACK INTEGER R_BRACK','indexTkn',3,'p_index_tkn','sbml.py',524),
]
