
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftAND_ALSOOR_ELSEleftEQ_EQNEQLTLTEGTGTErightCONSleftINleftMINUSPLUSleftMULTDIVDIVINTMODrightUMINUSrightPOWleftL_BRACKR_BRACKrightHASHTAGleftL_PARENR_PARENAND_ALSO BOOLEAN COLON COMMA CONS DIV DIVINT ELSE EQ EQ_EQ FLOAT GT GTE HASHTAG IF IN INTEGER LC LT LTE L_BRACK L_PAREN MINUS MOD MULT NEQ NOT OR_ELSE PLUS POW PRINT RC R_BRACK R_PAREN SEMICOLON STRING VARIABLE WHILEprogram : block_listblock_list : block_list stmt_list\n                  | stmt_listblock_list : block_list block\n                  | blockcond_stmt : if\n                 | if_else\n                 | whilestmt_list : stmt_list stmt\n                 | stmtblock : LC block_list RC\n             | LC RCprint : PRINT L_PAREN expr R_PARENstmt : expr SEMICOLON\n            | print SEMICOLON\n            | assignment SEMICOLON\n            | cond_stmtif_else : IF L_PAREN expr R_PAREN block ELSE blockif : IF L_PAREN expr R_PAREN blockwhile : WHILE L_PAREN expr R_PAREN blockexpr : INTEGER\n            | FLOAT\n            | STRING\n            | BOOLEAN\n            | VARIABLE\n            | list\n            | tupleassignment : expr indexSequenceList EQ exprassignment : expr EQ exprexpr : HASHTAG INTEGER expr %prec HASHTAGtuple : L_PAREN sequence R_PAREN\n             | L_PAREN R_PARENexpr : expr POW expr\n            | expr MULT expr\n            | expr DIVINT expr\n            | expr DIV expr\n            | expr MOD expr\n            | expr PLUS expr\n            | expr MINUS exprexpr : MINUS expr %prec UMINUSexpr : expr AND_ALSO expr\n            | expr OR_ELSE expr\n            | expr LTE expr\n            | expr GTE expr\n            | expr EQ_EQ expr\n            | expr NEQ expr\n            | expr LT expr\n            | expr GT exprexpr : expr IN expr\n            | expr CONS exprexpr : NOT expr %prec UMINUSindexSequenceList : indexSequenceList indexTkn\n                         | indexTknindexTkn : L_BRACK expr R_BRACKexpr : expr L_BRACK expr R_BRACKlist : L_BRACK sequence R_BRACK\n            | L_BRACK R_BRACKsequence : expr COMMA sequence\n                   | exprexpr : L_PAREN expr R_PAREN'
    
_lr_action_items = {'LC':([0,2,3,4,5,6,10,24,25,26,29,30,31,32,33,34,56,57,70,108,109,112,113,114,115,],[6,6,-3,-5,-10,6,-17,-6,-7,-8,-2,-4,-9,6,-12,-14,-15,-16,-11,6,6,-19,-20,6,-18,]),'INTEGER':([0,2,3,4,5,6,10,18,19,20,21,22,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,56,57,58,67,68,69,70,89,91,94,96,112,113,115,],[11,11,11,-5,-10,11,-17,58,11,11,11,11,-6,-7,-8,11,-4,-9,11,-12,-14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-15,-16,11,11,11,11,-11,11,11,11,11,-19,-20,-18,]),'FLOAT':([0,2,3,4,5,6,10,19,20,21,22,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,56,57,58,67,68,69,70,89,91,94,96,112,113,115,],[12,12,12,-5,-10,12,-17,12,12,12,12,-6,-7,-8,12,-4,-9,12,-12,-14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-15,-16,12,12,12,12,-11,12,12,12,12,-19,-20,-18,]),'STRING':([0,2,3,4,5,6,10,19,20,21,22,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,56,57,58,67,68,69,70,89,91,94,96,112,113,115,],[13,13,13,-5,-10,13,-17,13,13,13,13,-6,-7,-8,13,-4,-9,13,-12,-14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-15,-16,13,13,13,13,-11,13,13,13,13,-19,-20,-18,]),'BOOLEAN':([0,2,3,4,5,6,10,19,20,21,22,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,56,57,58,67,68,69,70,89,91,94,96,112,113,115,],[14,14,14,-5,-10,14,-17,14,14,14,14,-6,-7,-8,14,-4,-9,14,-12,-14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-15,-16,14,14,14,14,-11,14,14,14,14,-19,-20,-18,]),'VARIABLE':([0,2,3,4,5,6,10,19,20,21,22,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,56,57,58,67,68,69,70,89,91,94,96,112,113,115,],[15,15,15,-5,-10,15,-17,15,15,15,15,-6,-7,-8,15,-4,-9,15,-12,-14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-15,-16,15,15,15,15,-11,15,15,15,15,-19,-20,-18,]),'HASHTAG':([0,2,3,4,5,6,10,19,20,21,22,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,56,57,58,67,68,69,70,89,91,94,96,112,113,115,],[18,18,18,-5,-10,18,-17,18,18,18,18,-6,-7,-8,18,-4,-9,18,-12,-14,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-15,-16,18,18,18,18,-11,18,18,18,18,-19,-20,-18,]),'MINUS':([0,2,3,4,5,6,7,10,11,12,13,14,15,16,17,19,20,21,22,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,56,57,58,59,60,62,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,111,112,113,115,],[19,19,19,-5,-10,19,41,-17,-21,-22,-23,-24,-25,-26,-27,19,19,19,19,-6,-7,-8,19,-4,-9,19,-12,-14,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-15,-16,19,-40,-51,-57,41,41,-32,19,19,19,-11,-33,-34,-35,-36,-37,-38,-39,41,41,41,41,41,41,41,41,41,41,41,19,19,41,-30,19,-56,19,-60,-31,41,41,41,-55,41,41,41,-55,-19,-20,-18,]),'NOT':([0,2,3,4,5,6,10,19,20,21,22,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,56,57,58,67,68,69,70,89,91,94,96,112,113,115,],[20,20,20,-5,-10,20,-17,20,20,20,20,-6,-7,-8,20,-4,-9,20,-12,-14,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-15,-16,20,20,20,20,-11,20,20,20,20,-19,-20,-18,]),'L_PAREN':([0,2,3,4,5,6,10,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,56,57,58,67,68,69,70,89,91,94,96,112,113,115,],[22,22,22,-5,-10,22,-17,22,22,22,22,67,-6,-7,-8,68,69,22,-4,-9,22,-12,-14,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-15,-16,22,22,22,22,-11,22,22,22,22,-19,-20,-18,]),'PRINT':([0,2,3,4,5,6,10,24,25,26,29,30,31,32,33,34,56,57,70,112,113,115,],[23,23,23,-5,-10,23,-17,-6,-7,-8,23,-4,-9,23,-12,-14,-15,-16,-11,-19,-20,-18,]),'L_BRACK':([0,2,3,4,5,6,7,10,11,12,13,14,15,16,17,19,20,21,22,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,111,112,113,115,],[21,21,21,-5,-10,21,52,-17,-21,-22,-23,-24,-25,-26,-27,21,21,21,21,-6,-7,-8,21,-4,-9,21,-12,-14,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,91,21,-53,-15,-16,21,94,94,-57,94,94,-32,21,21,21,-11,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,21,-52,21,94,-30,21,-56,21,-60,-31,94,94,94,-54,94,94,94,-54,-55,-19,-20,-18,]),'IF':([0,2,3,4,5,6,10,24,25,26,29,30,31,32,33,34,56,57,70,112,113,115,],[27,27,27,-5,-10,27,-17,-6,-7,-8,27,-4,-9,27,-12,-14,-15,-16,-11,-19,-20,-18,]),'WHILE':([0,2,3,4,5,6,10,24,25,26,29,30,31,32,33,34,56,57,70,112,113,115,],[28,28,28,-5,-10,28,-17,-6,-7,-8,28,-4,-9,28,-12,-14,-15,-16,-11,-19,-20,-18,]),'$end':([1,2,3,4,5,10,24,25,26,29,30,31,33,34,56,57,70,112,113,115,],[0,-1,-3,-5,-10,-17,-6,-7,-8,-2,-4,-9,-12,-14,-15,-16,-11,-19,-20,-18,]),'RC':([3,4,5,6,10,24,25,26,29,30,31,32,33,34,56,57,70,112,113,115,],[-3,-5,-10,33,-17,-6,-7,-8,-2,-4,-9,70,-12,-14,-15,-16,-11,-19,-20,-18,]),'SEMICOLON':([7,8,9,11,12,13,14,15,16,17,59,60,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,92,93,95,97,98,102,103,107,111,],[34,56,57,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,-32,-33,-34,-35,-36,-37,-38,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-29,-30,-56,-60,-31,-55,-28,-13,-55,]),'POW':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[35,-21,-22,-23,-24,-25,-26,-27,35,35,-57,35,35,-32,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-30,-56,-60,-31,35,35,35,-55,35,35,35,-55,]),'MULT':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[36,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,36,36,-32,-33,-34,-35,-36,-37,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-30,-56,-60,-31,36,36,36,-55,36,36,36,-55,]),'DIVINT':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[37,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,37,37,-32,-33,-34,-35,-36,-37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-30,-56,-60,-31,37,37,37,-55,37,37,37,-55,]),'DIV':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[38,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,38,38,-32,-33,-34,-35,-36,-37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-30,-56,-60,-31,38,38,38,-55,38,38,38,-55,]),'MOD':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[39,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,39,39,-32,-33,-34,-35,-36,-37,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-30,-56,-60,-31,39,39,39,-55,39,39,39,-55,]),'PLUS':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[40,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,40,40,-32,-33,-34,-35,-36,-37,-38,-39,40,40,40,40,40,40,40,40,40,40,40,40,-30,-56,-60,-31,40,40,40,-55,40,40,40,-55,]),'AND_ALSO':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[42,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,42,42,-32,-33,-34,-35,-36,-37,-38,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,42,42,-30,-56,-60,-31,42,42,42,-55,42,42,42,-55,]),'OR_ELSE':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[43,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,43,43,-32,-33,-34,-35,-36,-37,-38,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,43,43,-30,-56,-60,-31,43,43,43,-55,43,43,43,-55,]),'LTE':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[44,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,44,44,-32,-33,-34,-35,-36,-37,-38,-39,44,44,-43,-44,-45,-46,-47,-48,-49,-50,44,44,-30,-56,-60,-31,44,44,44,-55,44,44,44,-55,]),'GTE':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[45,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,45,45,-32,-33,-34,-35,-36,-37,-38,-39,45,45,-43,-44,-45,-46,-47,-48,-49,-50,45,45,-30,-56,-60,-31,45,45,45,-55,45,45,45,-55,]),'EQ_EQ':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[46,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,46,46,-32,-33,-34,-35,-36,-37,-38,-39,46,46,-43,-44,-45,-46,-47,-48,-49,-50,46,46,-30,-56,-60,-31,46,46,46,-55,46,46,46,-55,]),'NEQ':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[47,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,47,47,-32,-33,-34,-35,-36,-37,-38,-39,47,47,-43,-44,-45,-46,-47,-48,-49,-50,47,47,-30,-56,-60,-31,47,47,47,-55,47,47,47,-55,]),'LT':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[48,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,48,48,-32,-33,-34,-35,-36,-37,-38,-39,48,48,-43,-44,-45,-46,-47,-48,-49,-50,48,48,-30,-56,-60,-31,48,48,48,-55,48,48,48,-55,]),'GT':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[49,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,49,49,-32,-33,-34,-35,-36,-37,-38,-39,49,49,-43,-44,-45,-46,-47,-48,-49,-50,49,49,-30,-56,-60,-31,49,49,49,-55,49,49,49,-55,]),'IN':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[50,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,50,50,-32,-33,-34,-35,-36,-37,-38,-39,50,50,50,50,50,50,50,50,-49,50,50,50,-30,-56,-60,-31,50,50,50,-55,50,50,50,-55,]),'CONS':([7,11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,95,97,98,99,100,101,102,103,104,105,111,],[51,-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,51,51,-32,-33,-34,-35,-36,-37,-38,-39,51,51,51,51,51,51,51,51,-49,51,51,51,-30,-56,-60,-31,51,51,51,-55,51,51,51,-55,]),'EQ':([7,11,12,13,14,15,16,17,53,55,59,60,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,90,93,95,97,98,102,110,111,],[54,-21,-22,-23,-24,-25,-26,-27,89,-53,-40,-51,-57,-32,-33,-34,-35,-36,-37,-38,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-30,-56,-60,-31,-54,-54,-55,]),'COMMA':([11,12,13,14,15,16,17,59,60,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93,95,97,98,111,],[-21,-22,-23,-24,-25,-26,-27,-40,-51,-57,96,96,-32,-33,-34,-35,-36,-37,-38,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-30,-56,-60,-31,-55,]),'R_BRACK':([11,12,13,14,15,16,17,21,59,60,61,62,63,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,95,97,98,104,105,106,111,],[-21,-22,-23,-24,-25,-26,-27,62,-40,-51,95,-57,-59,-32,-33,-34,-35,-36,-37,-38,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,102,-30,-56,-60,-31,110,111,-58,-55,]),'R_PAREN':([11,12,13,14,15,16,17,22,59,60,62,63,64,65,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93,95,97,98,99,100,101,106,111,],[-21,-22,-23,-24,-25,-26,-27,65,-40,-51,-57,-59,97,-32,98,-33,-34,-35,-36,-37,-38,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-30,-56,-60,-31,107,108,109,-58,-55,]),'ELSE':([33,70,112,],[-12,-11,114,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_list':([0,6,],[2,32,]),'stmt_list':([0,2,6,32,],[3,29,3,29,]),'block':([0,2,6,32,108,109,114,],[4,30,4,30,112,113,115,]),'stmt':([0,2,3,6,29,32,],[5,5,31,5,31,5,]),'expr':([0,2,3,6,19,20,21,22,29,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,58,67,68,69,89,91,94,96,],[7,7,7,7,59,60,63,64,7,7,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,99,100,101,103,104,105,63,]),'print':([0,2,3,6,29,32,],[8,8,8,8,8,8,]),'assignment':([0,2,3,6,29,32,],[9,9,9,9,9,9,]),'cond_stmt':([0,2,3,6,29,32,],[10,10,10,10,10,10,]),'list':([0,2,3,6,19,20,21,22,29,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,58,67,68,69,89,91,94,96,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'tuple':([0,2,3,6,19,20,21,22,29,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,58,67,68,69,89,91,94,96,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'if':([0,2,3,6,29,32,],[24,24,24,24,24,24,]),'if_else':([0,2,3,6,29,32,],[25,25,25,25,25,25,]),'while':([0,2,3,6,29,32,],[26,26,26,26,26,26,]),'indexSequenceList':([7,],[53,]),'indexTkn':([7,53,],[55,90,]),'sequence':([21,22,96,],[61,66,106,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_list','program',1,'p_program','sbml.py',407),
  ('block_list -> block_list stmt_list','block_list',2,'p_block_stmt_list','sbml.py',416),
  ('block_list -> stmt_list','block_list',1,'p_block_stmt_list','sbml.py',417),
  ('block_list -> block_list block','block_list',2,'p_block_list','sbml.py',424),
  ('block_list -> block','block_list',1,'p_block_list','sbml.py',425),
  ('cond_stmt -> if','cond_stmt',1,'p_cond_stmt','sbml.py',441),
  ('cond_stmt -> if_else','cond_stmt',1,'p_cond_stmt','sbml.py',442),
  ('cond_stmt -> while','cond_stmt',1,'p_cond_stmt','sbml.py',443),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','sbml.py',447),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','sbml.py',448),
  ('block -> LC block_list RC','block',3,'p_block','sbml.py',455),
  ('block -> LC RC','block',2,'p_block','sbml.py',456),
  ('print -> PRINT L_PAREN expr R_PAREN','print',4,'p_print','sbml.py',463),
  ('stmt -> expr SEMICOLON','stmt',2,'p_stmt','sbml.py',466),
  ('stmt -> print SEMICOLON','stmt',2,'p_stmt','sbml.py',467),
  ('stmt -> assignment SEMICOLON','stmt',2,'p_stmt','sbml.py',468),
  ('stmt -> cond_stmt','stmt',1,'p_stmt','sbml.py',469),
  ('if_else -> IF L_PAREN expr R_PAREN block ELSE block','if_else',7,'p_if_else','sbml.py',473),
  ('if -> IF L_PAREN expr R_PAREN block','if',5,'p_if','sbml.py',477),
  ('while -> WHILE L_PAREN expr R_PAREN block','while',5,'p_while','sbml.py',481),
  ('expr -> INTEGER','expr',1,'p_expr','sbml.py',487),
  ('expr -> FLOAT','expr',1,'p_expr','sbml.py',488),
  ('expr -> STRING','expr',1,'p_expr','sbml.py',489),
  ('expr -> BOOLEAN','expr',1,'p_expr','sbml.py',490),
  ('expr -> VARIABLE','expr',1,'p_expr','sbml.py',491),
  ('expr -> list','expr',1,'p_expr','sbml.py',492),
  ('expr -> tuple','expr',1,'p_expr','sbml.py',493),
  ('assignment -> expr indexSequenceList EQ expr','assignment',4,'p_list_assignment','sbml.py',497),
  ('assignment -> expr EQ expr','assignment',3,'p_assignment','sbml.py',501),
  ('expr -> HASHTAG INTEGER expr','expr',3,'p_tuple_index','sbml.py',506),
  ('tuple -> L_PAREN sequence R_PAREN','tuple',3,'p_tuple','sbml.py',510),
  ('tuple -> L_PAREN R_PAREN','tuple',2,'p_tuple','sbml.py',511),
  ('expr -> expr POW expr','expr',3,'p_binop_expr','sbml.py',518),
  ('expr -> expr MULT expr','expr',3,'p_binop_expr','sbml.py',519),
  ('expr -> expr DIVINT expr','expr',3,'p_binop_expr','sbml.py',520),
  ('expr -> expr DIV expr','expr',3,'p_binop_expr','sbml.py',521),
  ('expr -> expr MOD expr','expr',3,'p_binop_expr','sbml.py',522),
  ('expr -> expr PLUS expr','expr',3,'p_binop_expr','sbml.py',523),
  ('expr -> expr MINUS expr','expr',3,'p_binop_expr','sbml.py',524),
  ('expr -> MINUS expr','expr',2,'p_expr_uminus','sbml.py',528),
  ('expr -> expr AND_ALSO expr','expr',3,'p_boolop','sbml.py',532),
  ('expr -> expr OR_ELSE expr','expr',3,'p_boolop','sbml.py',533),
  ('expr -> expr LTE expr','expr',3,'p_boolop','sbml.py',534),
  ('expr -> expr GTE expr','expr',3,'p_boolop','sbml.py',535),
  ('expr -> expr EQ_EQ expr','expr',3,'p_boolop','sbml.py',536),
  ('expr -> expr NEQ expr','expr',3,'p_boolop','sbml.py',537),
  ('expr -> expr LT expr','expr',3,'p_boolop','sbml.py',538),
  ('expr -> expr GT expr','expr',3,'p_boolop','sbml.py',539),
  ('expr -> expr IN expr','expr',3,'p_listop','sbml.py',543),
  ('expr -> expr CONS expr','expr',3,'p_listop','sbml.py',544),
  ('expr -> NOT expr','expr',2,'p_negationOp','sbml.py',548),
  ('indexSequenceList -> indexSequenceList indexTkn','indexSequenceList',2,'p_index_sequence_list','sbml.py',553),
  ('indexSequenceList -> indexTkn','indexSequenceList',1,'p_index_sequence_list','sbml.py',554),
  ('indexTkn -> L_BRACK expr R_BRACK','indexTkn',3,'p_index_tkn','sbml.py',561),
  ('expr -> expr L_BRACK expr R_BRACK','expr',4,'p_list_index','sbml.py',565),
  ('list -> L_BRACK sequence R_BRACK','list',3,'p_list','sbml.py',569),
  ('list -> L_BRACK R_BRACK','list',2,'p_list','sbml.py',570),
  ('sequence -> expr COMMA sequence','sequence',3,'p_sequence','sbml.py',577),
  ('sequence -> expr','sequence',1,'p_sequence','sbml.py',578),
  ('expr -> L_PAREN expr R_PAREN','expr',3,'p_parenthesized','sbml.py',585),
]
